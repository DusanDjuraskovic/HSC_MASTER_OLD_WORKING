
SPI_MASTER_10MHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002de0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002ea0  08002ea0  00012ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f10  08002f10  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002f10  08002f10  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f10  08002f10  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000010  08002f28  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08002f28  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d5a  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017df  00000000  00000000  00029d92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002b578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002c038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ffc2  00000000  00000000  0002ca40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb74  00000000  00000000  0003ca02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000630b0  00000000  00000000  00048576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ab626  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002774  00000000  00000000  000ab678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e88 	.word	0x08002e88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002e88 	.word	0x08002e88

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_dmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	4645      	mov	r5, r8
 8000228:	46de      	mov	lr, fp
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	4698      	mov	r8, r3
 800022e:	030c      	lsls	r4, r1, #12
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	0006      	movs	r6, r0
 8000234:	4692      	mov	sl, r2
 8000236:	b087      	sub	sp, #28
 8000238:	0b24      	lsrs	r4, r4, #12
 800023a:	0d5b      	lsrs	r3, r3, #21
 800023c:	0fcf      	lsrs	r7, r1, #31
 800023e:	2b00      	cmp	r3, #0
 8000240:	d100      	bne.n	8000244 <__aeabi_dmul+0x24>
 8000242:	e15c      	b.n	80004fe <__aeabi_dmul+0x2de>
 8000244:	4ad9      	ldr	r2, [pc, #868]	; (80005ac <__aeabi_dmul+0x38c>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d100      	bne.n	800024c <__aeabi_dmul+0x2c>
 800024a:	e175      	b.n	8000538 <__aeabi_dmul+0x318>
 800024c:	0f42      	lsrs	r2, r0, #29
 800024e:	00e4      	lsls	r4, r4, #3
 8000250:	4314      	orrs	r4, r2
 8000252:	2280      	movs	r2, #128	; 0x80
 8000254:	0412      	lsls	r2, r2, #16
 8000256:	4314      	orrs	r4, r2
 8000258:	4ad5      	ldr	r2, [pc, #852]	; (80005b0 <__aeabi_dmul+0x390>)
 800025a:	00c5      	lsls	r5, r0, #3
 800025c:	4694      	mov	ip, r2
 800025e:	4463      	add	r3, ip
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	4699      	mov	r9, r3
 8000266:	469b      	mov	fp, r3
 8000268:	4643      	mov	r3, r8
 800026a:	4642      	mov	r2, r8
 800026c:	031e      	lsls	r6, r3, #12
 800026e:	0fd2      	lsrs	r2, r2, #31
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	4650      	mov	r0, sl
 8000274:	4690      	mov	r8, r2
 8000276:	0b36      	lsrs	r6, r6, #12
 8000278:	0d5b      	lsrs	r3, r3, #21
 800027a:	d100      	bne.n	800027e <__aeabi_dmul+0x5e>
 800027c:	e120      	b.n	80004c0 <__aeabi_dmul+0x2a0>
 800027e:	4acb      	ldr	r2, [pc, #812]	; (80005ac <__aeabi_dmul+0x38c>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d100      	bne.n	8000286 <__aeabi_dmul+0x66>
 8000284:	e162      	b.n	800054c <__aeabi_dmul+0x32c>
 8000286:	49ca      	ldr	r1, [pc, #808]	; (80005b0 <__aeabi_dmul+0x390>)
 8000288:	0f42      	lsrs	r2, r0, #29
 800028a:	468c      	mov	ip, r1
 800028c:	9900      	ldr	r1, [sp, #0]
 800028e:	4463      	add	r3, ip
 8000290:	00f6      	lsls	r6, r6, #3
 8000292:	468c      	mov	ip, r1
 8000294:	4316      	orrs	r6, r2
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	449c      	add	ip, r3
 800029a:	0412      	lsls	r2, r2, #16
 800029c:	4663      	mov	r3, ip
 800029e:	4316      	orrs	r6, r2
 80002a0:	00c2      	lsls	r2, r0, #3
 80002a2:	2000      	movs	r0, #0
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	9900      	ldr	r1, [sp, #0]
 80002a8:	4643      	mov	r3, r8
 80002aa:	3101      	adds	r1, #1
 80002ac:	468c      	mov	ip, r1
 80002ae:	4649      	mov	r1, r9
 80002b0:	407b      	eors	r3, r7
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	290f      	cmp	r1, #15
 80002b6:	d826      	bhi.n	8000306 <__aeabi_dmul+0xe6>
 80002b8:	4bbe      	ldr	r3, [pc, #760]	; (80005b4 <__aeabi_dmul+0x394>)
 80002ba:	0089      	lsls	r1, r1, #2
 80002bc:	5859      	ldr	r1, [r3, r1]
 80002be:	468f      	mov	pc, r1
 80002c0:	4643      	mov	r3, r8
 80002c2:	9301      	str	r3, [sp, #4]
 80002c4:	0034      	movs	r4, r6
 80002c6:	0015      	movs	r5, r2
 80002c8:	4683      	mov	fp, r0
 80002ca:	465b      	mov	r3, fp
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	d016      	beq.n	80002fe <__aeabi_dmul+0xde>
 80002d0:	2b03      	cmp	r3, #3
 80002d2:	d100      	bne.n	80002d6 <__aeabi_dmul+0xb6>
 80002d4:	e203      	b.n	80006de <__aeabi_dmul+0x4be>
 80002d6:	2b01      	cmp	r3, #1
 80002d8:	d000      	beq.n	80002dc <__aeabi_dmul+0xbc>
 80002da:	e0cd      	b.n	8000478 <__aeabi_dmul+0x258>
 80002dc:	2200      	movs	r2, #0
 80002de:	2400      	movs	r4, #0
 80002e0:	2500      	movs	r5, #0
 80002e2:	9b01      	ldr	r3, [sp, #4]
 80002e4:	0512      	lsls	r2, r2, #20
 80002e6:	4322      	orrs	r2, r4
 80002e8:	07db      	lsls	r3, r3, #31
 80002ea:	431a      	orrs	r2, r3
 80002ec:	0028      	movs	r0, r5
 80002ee:	0011      	movs	r1, r2
 80002f0:	b007      	add	sp, #28
 80002f2:	bcf0      	pop	{r4, r5, r6, r7}
 80002f4:	46bb      	mov	fp, r7
 80002f6:	46b2      	mov	sl, r6
 80002f8:	46a9      	mov	r9, r5
 80002fa:	46a0      	mov	r8, r4
 80002fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fe:	2400      	movs	r4, #0
 8000300:	2500      	movs	r5, #0
 8000302:	4aaa      	ldr	r2, [pc, #680]	; (80005ac <__aeabi_dmul+0x38c>)
 8000304:	e7ed      	b.n	80002e2 <__aeabi_dmul+0xc2>
 8000306:	0c28      	lsrs	r0, r5, #16
 8000308:	042d      	lsls	r5, r5, #16
 800030a:	0c2d      	lsrs	r5, r5, #16
 800030c:	002b      	movs	r3, r5
 800030e:	0c11      	lsrs	r1, r2, #16
 8000310:	0412      	lsls	r2, r2, #16
 8000312:	0c12      	lsrs	r2, r2, #16
 8000314:	4353      	muls	r3, r2
 8000316:	4698      	mov	r8, r3
 8000318:	0013      	movs	r3, r2
 800031a:	002f      	movs	r7, r5
 800031c:	4343      	muls	r3, r0
 800031e:	4699      	mov	r9, r3
 8000320:	434f      	muls	r7, r1
 8000322:	444f      	add	r7, r9
 8000324:	46bb      	mov	fp, r7
 8000326:	4647      	mov	r7, r8
 8000328:	000b      	movs	r3, r1
 800032a:	0c3f      	lsrs	r7, r7, #16
 800032c:	46ba      	mov	sl, r7
 800032e:	4343      	muls	r3, r0
 8000330:	44da      	add	sl, fp
 8000332:	9302      	str	r3, [sp, #8]
 8000334:	45d1      	cmp	r9, sl
 8000336:	d904      	bls.n	8000342 <__aeabi_dmul+0x122>
 8000338:	2780      	movs	r7, #128	; 0x80
 800033a:	027f      	lsls	r7, r7, #9
 800033c:	46b9      	mov	r9, r7
 800033e:	444b      	add	r3, r9
 8000340:	9302      	str	r3, [sp, #8]
 8000342:	4653      	mov	r3, sl
 8000344:	0c1b      	lsrs	r3, r3, #16
 8000346:	469b      	mov	fp, r3
 8000348:	4653      	mov	r3, sl
 800034a:	041f      	lsls	r7, r3, #16
 800034c:	4643      	mov	r3, r8
 800034e:	041b      	lsls	r3, r3, #16
 8000350:	0c1b      	lsrs	r3, r3, #16
 8000352:	4698      	mov	r8, r3
 8000354:	003b      	movs	r3, r7
 8000356:	4443      	add	r3, r8
 8000358:	9304      	str	r3, [sp, #16]
 800035a:	0c33      	lsrs	r3, r6, #16
 800035c:	0436      	lsls	r6, r6, #16
 800035e:	0c36      	lsrs	r6, r6, #16
 8000360:	4698      	mov	r8, r3
 8000362:	0033      	movs	r3, r6
 8000364:	4343      	muls	r3, r0
 8000366:	4699      	mov	r9, r3
 8000368:	4643      	mov	r3, r8
 800036a:	4343      	muls	r3, r0
 800036c:	002f      	movs	r7, r5
 800036e:	469a      	mov	sl, r3
 8000370:	4643      	mov	r3, r8
 8000372:	4377      	muls	r7, r6
 8000374:	435d      	muls	r5, r3
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	444d      	add	r5, r9
 800037a:	1945      	adds	r5, r0, r5
 800037c:	45a9      	cmp	r9, r5
 800037e:	d903      	bls.n	8000388 <__aeabi_dmul+0x168>
 8000380:	2380      	movs	r3, #128	; 0x80
 8000382:	025b      	lsls	r3, r3, #9
 8000384:	4699      	mov	r9, r3
 8000386:	44ca      	add	sl, r9
 8000388:	043f      	lsls	r7, r7, #16
 800038a:	0c28      	lsrs	r0, r5, #16
 800038c:	0c3f      	lsrs	r7, r7, #16
 800038e:	042d      	lsls	r5, r5, #16
 8000390:	19ed      	adds	r5, r5, r7
 8000392:	0c27      	lsrs	r7, r4, #16
 8000394:	0424      	lsls	r4, r4, #16
 8000396:	0c24      	lsrs	r4, r4, #16
 8000398:	0003      	movs	r3, r0
 800039a:	0020      	movs	r0, r4
 800039c:	4350      	muls	r0, r2
 800039e:	437a      	muls	r2, r7
 80003a0:	4691      	mov	r9, r2
 80003a2:	003a      	movs	r2, r7
 80003a4:	4453      	add	r3, sl
 80003a6:	9305      	str	r3, [sp, #20]
 80003a8:	0c03      	lsrs	r3, r0, #16
 80003aa:	469a      	mov	sl, r3
 80003ac:	434a      	muls	r2, r1
 80003ae:	4361      	muls	r1, r4
 80003b0:	4449      	add	r1, r9
 80003b2:	4451      	add	r1, sl
 80003b4:	44ab      	add	fp, r5
 80003b6:	4589      	cmp	r9, r1
 80003b8:	d903      	bls.n	80003c2 <__aeabi_dmul+0x1a2>
 80003ba:	2380      	movs	r3, #128	; 0x80
 80003bc:	025b      	lsls	r3, r3, #9
 80003be:	4699      	mov	r9, r3
 80003c0:	444a      	add	r2, r9
 80003c2:	0400      	lsls	r0, r0, #16
 80003c4:	0c0b      	lsrs	r3, r1, #16
 80003c6:	0c00      	lsrs	r0, r0, #16
 80003c8:	0409      	lsls	r1, r1, #16
 80003ca:	1809      	adds	r1, r1, r0
 80003cc:	0020      	movs	r0, r4
 80003ce:	4699      	mov	r9, r3
 80003d0:	4643      	mov	r3, r8
 80003d2:	4370      	muls	r0, r6
 80003d4:	435c      	muls	r4, r3
 80003d6:	437e      	muls	r6, r7
 80003d8:	435f      	muls	r7, r3
 80003da:	0c03      	lsrs	r3, r0, #16
 80003dc:	4698      	mov	r8, r3
 80003de:	19a4      	adds	r4, r4, r6
 80003e0:	4444      	add	r4, r8
 80003e2:	444a      	add	r2, r9
 80003e4:	9703      	str	r7, [sp, #12]
 80003e6:	42a6      	cmp	r6, r4
 80003e8:	d904      	bls.n	80003f4 <__aeabi_dmul+0x1d4>
 80003ea:	2380      	movs	r3, #128	; 0x80
 80003ec:	025b      	lsls	r3, r3, #9
 80003ee:	4698      	mov	r8, r3
 80003f0:	4447      	add	r7, r8
 80003f2:	9703      	str	r7, [sp, #12]
 80003f4:	0423      	lsls	r3, r4, #16
 80003f6:	9e02      	ldr	r6, [sp, #8]
 80003f8:	469a      	mov	sl, r3
 80003fa:	9b05      	ldr	r3, [sp, #20]
 80003fc:	445e      	add	r6, fp
 80003fe:	4698      	mov	r8, r3
 8000400:	42ae      	cmp	r6, r5
 8000402:	41ad      	sbcs	r5, r5
 8000404:	1876      	adds	r6, r6, r1
 8000406:	428e      	cmp	r6, r1
 8000408:	4189      	sbcs	r1, r1
 800040a:	0400      	lsls	r0, r0, #16
 800040c:	0c00      	lsrs	r0, r0, #16
 800040e:	4450      	add	r0, sl
 8000410:	4440      	add	r0, r8
 8000412:	426d      	negs	r5, r5
 8000414:	1947      	adds	r7, r0, r5
 8000416:	46b8      	mov	r8, r7
 8000418:	4693      	mov	fp, r2
 800041a:	4249      	negs	r1, r1
 800041c:	4689      	mov	r9, r1
 800041e:	44c3      	add	fp, r8
 8000420:	44d9      	add	r9, fp
 8000422:	4298      	cmp	r0, r3
 8000424:	4180      	sbcs	r0, r0
 8000426:	45a8      	cmp	r8, r5
 8000428:	41ad      	sbcs	r5, r5
 800042a:	4593      	cmp	fp, r2
 800042c:	4192      	sbcs	r2, r2
 800042e:	4589      	cmp	r9, r1
 8000430:	4189      	sbcs	r1, r1
 8000432:	426d      	negs	r5, r5
 8000434:	4240      	negs	r0, r0
 8000436:	4328      	orrs	r0, r5
 8000438:	0c24      	lsrs	r4, r4, #16
 800043a:	4252      	negs	r2, r2
 800043c:	4249      	negs	r1, r1
 800043e:	430a      	orrs	r2, r1
 8000440:	9b03      	ldr	r3, [sp, #12]
 8000442:	1900      	adds	r0, r0, r4
 8000444:	1880      	adds	r0, r0, r2
 8000446:	18c7      	adds	r7, r0, r3
 8000448:	464b      	mov	r3, r9
 800044a:	0ddc      	lsrs	r4, r3, #23
 800044c:	9b04      	ldr	r3, [sp, #16]
 800044e:	0275      	lsls	r5, r6, #9
 8000450:	431d      	orrs	r5, r3
 8000452:	1e6a      	subs	r2, r5, #1
 8000454:	4195      	sbcs	r5, r2
 8000456:	464b      	mov	r3, r9
 8000458:	0df6      	lsrs	r6, r6, #23
 800045a:	027f      	lsls	r7, r7, #9
 800045c:	4335      	orrs	r5, r6
 800045e:	025a      	lsls	r2, r3, #9
 8000460:	433c      	orrs	r4, r7
 8000462:	4315      	orrs	r5, r2
 8000464:	01fb      	lsls	r3, r7, #7
 8000466:	d400      	bmi.n	800046a <__aeabi_dmul+0x24a>
 8000468:	e11c      	b.n	80006a4 <__aeabi_dmul+0x484>
 800046a:	2101      	movs	r1, #1
 800046c:	086a      	lsrs	r2, r5, #1
 800046e:	400d      	ands	r5, r1
 8000470:	4315      	orrs	r5, r2
 8000472:	07e2      	lsls	r2, r4, #31
 8000474:	4315      	orrs	r5, r2
 8000476:	0864      	lsrs	r4, r4, #1
 8000478:	494f      	ldr	r1, [pc, #316]	; (80005b8 <__aeabi_dmul+0x398>)
 800047a:	4461      	add	r1, ip
 800047c:	2900      	cmp	r1, #0
 800047e:	dc00      	bgt.n	8000482 <__aeabi_dmul+0x262>
 8000480:	e0b0      	b.n	80005e4 <__aeabi_dmul+0x3c4>
 8000482:	076b      	lsls	r3, r5, #29
 8000484:	d009      	beq.n	800049a <__aeabi_dmul+0x27a>
 8000486:	220f      	movs	r2, #15
 8000488:	402a      	ands	r2, r5
 800048a:	2a04      	cmp	r2, #4
 800048c:	d005      	beq.n	800049a <__aeabi_dmul+0x27a>
 800048e:	1d2a      	adds	r2, r5, #4
 8000490:	42aa      	cmp	r2, r5
 8000492:	41ad      	sbcs	r5, r5
 8000494:	426d      	negs	r5, r5
 8000496:	1964      	adds	r4, r4, r5
 8000498:	0015      	movs	r5, r2
 800049a:	01e3      	lsls	r3, r4, #7
 800049c:	d504      	bpl.n	80004a8 <__aeabi_dmul+0x288>
 800049e:	2180      	movs	r1, #128	; 0x80
 80004a0:	4a46      	ldr	r2, [pc, #280]	; (80005bc <__aeabi_dmul+0x39c>)
 80004a2:	00c9      	lsls	r1, r1, #3
 80004a4:	4014      	ands	r4, r2
 80004a6:	4461      	add	r1, ip
 80004a8:	4a45      	ldr	r2, [pc, #276]	; (80005c0 <__aeabi_dmul+0x3a0>)
 80004aa:	4291      	cmp	r1, r2
 80004ac:	dd00      	ble.n	80004b0 <__aeabi_dmul+0x290>
 80004ae:	e726      	b.n	80002fe <__aeabi_dmul+0xde>
 80004b0:	0762      	lsls	r2, r4, #29
 80004b2:	08ed      	lsrs	r5, r5, #3
 80004b4:	0264      	lsls	r4, r4, #9
 80004b6:	0549      	lsls	r1, r1, #21
 80004b8:	4315      	orrs	r5, r2
 80004ba:	0b24      	lsrs	r4, r4, #12
 80004bc:	0d4a      	lsrs	r2, r1, #21
 80004be:	e710      	b.n	80002e2 <__aeabi_dmul+0xc2>
 80004c0:	4652      	mov	r2, sl
 80004c2:	4332      	orrs	r2, r6
 80004c4:	d100      	bne.n	80004c8 <__aeabi_dmul+0x2a8>
 80004c6:	e07f      	b.n	80005c8 <__aeabi_dmul+0x3a8>
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d100      	bne.n	80004ce <__aeabi_dmul+0x2ae>
 80004cc:	e0dc      	b.n	8000688 <__aeabi_dmul+0x468>
 80004ce:	0030      	movs	r0, r6
 80004d0:	f000 f9c0 	bl	8000854 <__clzsi2>
 80004d4:	0002      	movs	r2, r0
 80004d6:	3a0b      	subs	r2, #11
 80004d8:	231d      	movs	r3, #29
 80004da:	0001      	movs	r1, r0
 80004dc:	1a9b      	subs	r3, r3, r2
 80004de:	4652      	mov	r2, sl
 80004e0:	3908      	subs	r1, #8
 80004e2:	40da      	lsrs	r2, r3
 80004e4:	408e      	lsls	r6, r1
 80004e6:	4316      	orrs	r6, r2
 80004e8:	4652      	mov	r2, sl
 80004ea:	408a      	lsls	r2, r1
 80004ec:	9b00      	ldr	r3, [sp, #0]
 80004ee:	4935      	ldr	r1, [pc, #212]	; (80005c4 <__aeabi_dmul+0x3a4>)
 80004f0:	1a18      	subs	r0, r3, r0
 80004f2:	0003      	movs	r3, r0
 80004f4:	468c      	mov	ip, r1
 80004f6:	4463      	add	r3, ip
 80004f8:	2000      	movs	r0, #0
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	e6d3      	b.n	80002a6 <__aeabi_dmul+0x86>
 80004fe:	0025      	movs	r5, r4
 8000500:	4305      	orrs	r5, r0
 8000502:	d04a      	beq.n	800059a <__aeabi_dmul+0x37a>
 8000504:	2c00      	cmp	r4, #0
 8000506:	d100      	bne.n	800050a <__aeabi_dmul+0x2ea>
 8000508:	e0b0      	b.n	800066c <__aeabi_dmul+0x44c>
 800050a:	0020      	movs	r0, r4
 800050c:	f000 f9a2 	bl	8000854 <__clzsi2>
 8000510:	0001      	movs	r1, r0
 8000512:	0002      	movs	r2, r0
 8000514:	390b      	subs	r1, #11
 8000516:	231d      	movs	r3, #29
 8000518:	0010      	movs	r0, r2
 800051a:	1a5b      	subs	r3, r3, r1
 800051c:	0031      	movs	r1, r6
 800051e:	0035      	movs	r5, r6
 8000520:	3808      	subs	r0, #8
 8000522:	4084      	lsls	r4, r0
 8000524:	40d9      	lsrs	r1, r3
 8000526:	4085      	lsls	r5, r0
 8000528:	430c      	orrs	r4, r1
 800052a:	4826      	ldr	r0, [pc, #152]	; (80005c4 <__aeabi_dmul+0x3a4>)
 800052c:	1a83      	subs	r3, r0, r2
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	2300      	movs	r3, #0
 8000532:	4699      	mov	r9, r3
 8000534:	469b      	mov	fp, r3
 8000536:	e697      	b.n	8000268 <__aeabi_dmul+0x48>
 8000538:	0005      	movs	r5, r0
 800053a:	4325      	orrs	r5, r4
 800053c:	d126      	bne.n	800058c <__aeabi_dmul+0x36c>
 800053e:	2208      	movs	r2, #8
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2302      	movs	r3, #2
 8000544:	2400      	movs	r4, #0
 8000546:	4691      	mov	r9, r2
 8000548:	469b      	mov	fp, r3
 800054a:	e68d      	b.n	8000268 <__aeabi_dmul+0x48>
 800054c:	4652      	mov	r2, sl
 800054e:	9b00      	ldr	r3, [sp, #0]
 8000550:	4332      	orrs	r2, r6
 8000552:	d110      	bne.n	8000576 <__aeabi_dmul+0x356>
 8000554:	4915      	ldr	r1, [pc, #84]	; (80005ac <__aeabi_dmul+0x38c>)
 8000556:	2600      	movs	r6, #0
 8000558:	468c      	mov	ip, r1
 800055a:	4463      	add	r3, ip
 800055c:	4649      	mov	r1, r9
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2302      	movs	r3, #2
 8000562:	4319      	orrs	r1, r3
 8000564:	4689      	mov	r9, r1
 8000566:	2002      	movs	r0, #2
 8000568:	e69d      	b.n	80002a6 <__aeabi_dmul+0x86>
 800056a:	465b      	mov	r3, fp
 800056c:	9701      	str	r7, [sp, #4]
 800056e:	2b02      	cmp	r3, #2
 8000570:	d000      	beq.n	8000574 <__aeabi_dmul+0x354>
 8000572:	e6ad      	b.n	80002d0 <__aeabi_dmul+0xb0>
 8000574:	e6c3      	b.n	80002fe <__aeabi_dmul+0xde>
 8000576:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <__aeabi_dmul+0x38c>)
 8000578:	2003      	movs	r0, #3
 800057a:	4694      	mov	ip, r2
 800057c:	4463      	add	r3, ip
 800057e:	464a      	mov	r2, r9
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2303      	movs	r3, #3
 8000584:	431a      	orrs	r2, r3
 8000586:	4691      	mov	r9, r2
 8000588:	4652      	mov	r2, sl
 800058a:	e68c      	b.n	80002a6 <__aeabi_dmul+0x86>
 800058c:	220c      	movs	r2, #12
 800058e:	9300      	str	r3, [sp, #0]
 8000590:	2303      	movs	r3, #3
 8000592:	0005      	movs	r5, r0
 8000594:	4691      	mov	r9, r2
 8000596:	469b      	mov	fp, r3
 8000598:	e666      	b.n	8000268 <__aeabi_dmul+0x48>
 800059a:	2304      	movs	r3, #4
 800059c:	4699      	mov	r9, r3
 800059e:	2300      	movs	r3, #0
 80005a0:	9300      	str	r3, [sp, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	2400      	movs	r4, #0
 80005a6:	469b      	mov	fp, r3
 80005a8:	e65e      	b.n	8000268 <__aeabi_dmul+0x48>
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	000007ff 	.word	0x000007ff
 80005b0:	fffffc01 	.word	0xfffffc01
 80005b4:	08002ea0 	.word	0x08002ea0
 80005b8:	000003ff 	.word	0x000003ff
 80005bc:	feffffff 	.word	0xfeffffff
 80005c0:	000007fe 	.word	0x000007fe
 80005c4:	fffffc0d 	.word	0xfffffc0d
 80005c8:	4649      	mov	r1, r9
 80005ca:	2301      	movs	r3, #1
 80005cc:	4319      	orrs	r1, r3
 80005ce:	4689      	mov	r9, r1
 80005d0:	2600      	movs	r6, #0
 80005d2:	2001      	movs	r0, #1
 80005d4:	e667      	b.n	80002a6 <__aeabi_dmul+0x86>
 80005d6:	2300      	movs	r3, #0
 80005d8:	2480      	movs	r4, #128	; 0x80
 80005da:	2500      	movs	r5, #0
 80005dc:	4a43      	ldr	r2, [pc, #268]	; (80006ec <__aeabi_dmul+0x4cc>)
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	0324      	lsls	r4, r4, #12
 80005e2:	e67e      	b.n	80002e2 <__aeabi_dmul+0xc2>
 80005e4:	2001      	movs	r0, #1
 80005e6:	1a40      	subs	r0, r0, r1
 80005e8:	2838      	cmp	r0, #56	; 0x38
 80005ea:	dd00      	ble.n	80005ee <__aeabi_dmul+0x3ce>
 80005ec:	e676      	b.n	80002dc <__aeabi_dmul+0xbc>
 80005ee:	281f      	cmp	r0, #31
 80005f0:	dd5b      	ble.n	80006aa <__aeabi_dmul+0x48a>
 80005f2:	221f      	movs	r2, #31
 80005f4:	0023      	movs	r3, r4
 80005f6:	4252      	negs	r2, r2
 80005f8:	1a51      	subs	r1, r2, r1
 80005fa:	40cb      	lsrs	r3, r1
 80005fc:	0019      	movs	r1, r3
 80005fe:	2820      	cmp	r0, #32
 8000600:	d003      	beq.n	800060a <__aeabi_dmul+0x3ea>
 8000602:	4a3b      	ldr	r2, [pc, #236]	; (80006f0 <__aeabi_dmul+0x4d0>)
 8000604:	4462      	add	r2, ip
 8000606:	4094      	lsls	r4, r2
 8000608:	4325      	orrs	r5, r4
 800060a:	1e6a      	subs	r2, r5, #1
 800060c:	4195      	sbcs	r5, r2
 800060e:	002a      	movs	r2, r5
 8000610:	430a      	orrs	r2, r1
 8000612:	2107      	movs	r1, #7
 8000614:	000d      	movs	r5, r1
 8000616:	2400      	movs	r4, #0
 8000618:	4015      	ands	r5, r2
 800061a:	4211      	tst	r1, r2
 800061c:	d05b      	beq.n	80006d6 <__aeabi_dmul+0x4b6>
 800061e:	210f      	movs	r1, #15
 8000620:	2400      	movs	r4, #0
 8000622:	4011      	ands	r1, r2
 8000624:	2904      	cmp	r1, #4
 8000626:	d053      	beq.n	80006d0 <__aeabi_dmul+0x4b0>
 8000628:	1d11      	adds	r1, r2, #4
 800062a:	4291      	cmp	r1, r2
 800062c:	4192      	sbcs	r2, r2
 800062e:	4252      	negs	r2, r2
 8000630:	18a4      	adds	r4, r4, r2
 8000632:	000a      	movs	r2, r1
 8000634:	0223      	lsls	r3, r4, #8
 8000636:	d54b      	bpl.n	80006d0 <__aeabi_dmul+0x4b0>
 8000638:	2201      	movs	r2, #1
 800063a:	2400      	movs	r4, #0
 800063c:	2500      	movs	r5, #0
 800063e:	e650      	b.n	80002e2 <__aeabi_dmul+0xc2>
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	031b      	lsls	r3, r3, #12
 8000644:	421c      	tst	r4, r3
 8000646:	d009      	beq.n	800065c <__aeabi_dmul+0x43c>
 8000648:	421e      	tst	r6, r3
 800064a:	d107      	bne.n	800065c <__aeabi_dmul+0x43c>
 800064c:	4333      	orrs	r3, r6
 800064e:	031c      	lsls	r4, r3, #12
 8000650:	4643      	mov	r3, r8
 8000652:	0015      	movs	r5, r2
 8000654:	0b24      	lsrs	r4, r4, #12
 8000656:	4a25      	ldr	r2, [pc, #148]	; (80006ec <__aeabi_dmul+0x4cc>)
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	e642      	b.n	80002e2 <__aeabi_dmul+0xc2>
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	0312      	lsls	r2, r2, #12
 8000660:	4314      	orrs	r4, r2
 8000662:	0324      	lsls	r4, r4, #12
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <__aeabi_dmul+0x4cc>)
 8000666:	0b24      	lsrs	r4, r4, #12
 8000668:	9701      	str	r7, [sp, #4]
 800066a:	e63a      	b.n	80002e2 <__aeabi_dmul+0xc2>
 800066c:	f000 f8f2 	bl	8000854 <__clzsi2>
 8000670:	0001      	movs	r1, r0
 8000672:	0002      	movs	r2, r0
 8000674:	3115      	adds	r1, #21
 8000676:	3220      	adds	r2, #32
 8000678:	291c      	cmp	r1, #28
 800067a:	dc00      	bgt.n	800067e <__aeabi_dmul+0x45e>
 800067c:	e74b      	b.n	8000516 <__aeabi_dmul+0x2f6>
 800067e:	0034      	movs	r4, r6
 8000680:	3808      	subs	r0, #8
 8000682:	2500      	movs	r5, #0
 8000684:	4084      	lsls	r4, r0
 8000686:	e750      	b.n	800052a <__aeabi_dmul+0x30a>
 8000688:	f000 f8e4 	bl	8000854 <__clzsi2>
 800068c:	0003      	movs	r3, r0
 800068e:	001a      	movs	r2, r3
 8000690:	3215      	adds	r2, #21
 8000692:	3020      	adds	r0, #32
 8000694:	2a1c      	cmp	r2, #28
 8000696:	dc00      	bgt.n	800069a <__aeabi_dmul+0x47a>
 8000698:	e71e      	b.n	80004d8 <__aeabi_dmul+0x2b8>
 800069a:	4656      	mov	r6, sl
 800069c:	3b08      	subs	r3, #8
 800069e:	2200      	movs	r2, #0
 80006a0:	409e      	lsls	r6, r3
 80006a2:	e723      	b.n	80004ec <__aeabi_dmul+0x2cc>
 80006a4:	9b00      	ldr	r3, [sp, #0]
 80006a6:	469c      	mov	ip, r3
 80006a8:	e6e6      	b.n	8000478 <__aeabi_dmul+0x258>
 80006aa:	4912      	ldr	r1, [pc, #72]	; (80006f4 <__aeabi_dmul+0x4d4>)
 80006ac:	0022      	movs	r2, r4
 80006ae:	4461      	add	r1, ip
 80006b0:	002e      	movs	r6, r5
 80006b2:	408d      	lsls	r5, r1
 80006b4:	408a      	lsls	r2, r1
 80006b6:	40c6      	lsrs	r6, r0
 80006b8:	1e69      	subs	r1, r5, #1
 80006ba:	418d      	sbcs	r5, r1
 80006bc:	4332      	orrs	r2, r6
 80006be:	432a      	orrs	r2, r5
 80006c0:	40c4      	lsrs	r4, r0
 80006c2:	0753      	lsls	r3, r2, #29
 80006c4:	d0b6      	beq.n	8000634 <__aeabi_dmul+0x414>
 80006c6:	210f      	movs	r1, #15
 80006c8:	4011      	ands	r1, r2
 80006ca:	2904      	cmp	r1, #4
 80006cc:	d1ac      	bne.n	8000628 <__aeabi_dmul+0x408>
 80006ce:	e7b1      	b.n	8000634 <__aeabi_dmul+0x414>
 80006d0:	0765      	lsls	r5, r4, #29
 80006d2:	0264      	lsls	r4, r4, #9
 80006d4:	0b24      	lsrs	r4, r4, #12
 80006d6:	08d2      	lsrs	r2, r2, #3
 80006d8:	4315      	orrs	r5, r2
 80006da:	2200      	movs	r2, #0
 80006dc:	e601      	b.n	80002e2 <__aeabi_dmul+0xc2>
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	0312      	lsls	r2, r2, #12
 80006e2:	4314      	orrs	r4, r2
 80006e4:	0324      	lsls	r4, r4, #12
 80006e6:	4a01      	ldr	r2, [pc, #4]	; (80006ec <__aeabi_dmul+0x4cc>)
 80006e8:	0b24      	lsrs	r4, r4, #12
 80006ea:	e5fa      	b.n	80002e2 <__aeabi_dmul+0xc2>
 80006ec:	000007ff 	.word	0x000007ff
 80006f0:	0000043e 	.word	0x0000043e
 80006f4:	0000041e 	.word	0x0000041e

080006f8 <__aeabi_ui2d>:
 80006f8:	b510      	push	{r4, lr}
 80006fa:	1e04      	subs	r4, r0, #0
 80006fc:	d010      	beq.n	8000720 <__aeabi_ui2d+0x28>
 80006fe:	f000 f8a9 	bl	8000854 <__clzsi2>
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <__aeabi_ui2d+0x48>)
 8000704:	1a1b      	subs	r3, r3, r0
 8000706:	280a      	cmp	r0, #10
 8000708:	dc11      	bgt.n	800072e <__aeabi_ui2d+0x36>
 800070a:	220b      	movs	r2, #11
 800070c:	0021      	movs	r1, r4
 800070e:	1a12      	subs	r2, r2, r0
 8000710:	40d1      	lsrs	r1, r2
 8000712:	3015      	adds	r0, #21
 8000714:	030a      	lsls	r2, r1, #12
 8000716:	055b      	lsls	r3, r3, #21
 8000718:	4084      	lsls	r4, r0
 800071a:	0b12      	lsrs	r2, r2, #12
 800071c:	0d5b      	lsrs	r3, r3, #21
 800071e:	e001      	b.n	8000724 <__aeabi_ui2d+0x2c>
 8000720:	2300      	movs	r3, #0
 8000722:	2200      	movs	r2, #0
 8000724:	051b      	lsls	r3, r3, #20
 8000726:	4313      	orrs	r3, r2
 8000728:	0020      	movs	r0, r4
 800072a:	0019      	movs	r1, r3
 800072c:	bd10      	pop	{r4, pc}
 800072e:	0022      	movs	r2, r4
 8000730:	380b      	subs	r0, #11
 8000732:	4082      	lsls	r2, r0
 8000734:	055b      	lsls	r3, r3, #21
 8000736:	0312      	lsls	r2, r2, #12
 8000738:	2400      	movs	r4, #0
 800073a:	0b12      	lsrs	r2, r2, #12
 800073c:	0d5b      	lsrs	r3, r3, #21
 800073e:	e7f1      	b.n	8000724 <__aeabi_ui2d+0x2c>
 8000740:	0000041e 	.word	0x0000041e

08000744 <__aeabi_d2f>:
 8000744:	0002      	movs	r2, r0
 8000746:	004b      	lsls	r3, r1, #1
 8000748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074a:	0d5b      	lsrs	r3, r3, #21
 800074c:	030c      	lsls	r4, r1, #12
 800074e:	4e3d      	ldr	r6, [pc, #244]	; (8000844 <__aeabi_d2f+0x100>)
 8000750:	0a64      	lsrs	r4, r4, #9
 8000752:	0f40      	lsrs	r0, r0, #29
 8000754:	1c5f      	adds	r7, r3, #1
 8000756:	0fc9      	lsrs	r1, r1, #31
 8000758:	4304      	orrs	r4, r0
 800075a:	00d5      	lsls	r5, r2, #3
 800075c:	4237      	tst	r7, r6
 800075e:	d00a      	beq.n	8000776 <__aeabi_d2f+0x32>
 8000760:	4839      	ldr	r0, [pc, #228]	; (8000848 <__aeabi_d2f+0x104>)
 8000762:	181e      	adds	r6, r3, r0
 8000764:	2efe      	cmp	r6, #254	; 0xfe
 8000766:	dd16      	ble.n	8000796 <__aeabi_d2f+0x52>
 8000768:	20ff      	movs	r0, #255	; 0xff
 800076a:	2400      	movs	r4, #0
 800076c:	05c0      	lsls	r0, r0, #23
 800076e:	4320      	orrs	r0, r4
 8000770:	07c9      	lsls	r1, r1, #31
 8000772:	4308      	orrs	r0, r1
 8000774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000776:	2b00      	cmp	r3, #0
 8000778:	d106      	bne.n	8000788 <__aeabi_d2f+0x44>
 800077a:	432c      	orrs	r4, r5
 800077c:	d026      	beq.n	80007cc <__aeabi_d2f+0x88>
 800077e:	2205      	movs	r2, #5
 8000780:	0192      	lsls	r2, r2, #6
 8000782:	0a54      	lsrs	r4, r2, #9
 8000784:	b2d8      	uxtb	r0, r3
 8000786:	e7f1      	b.n	800076c <__aeabi_d2f+0x28>
 8000788:	4325      	orrs	r5, r4
 800078a:	d0ed      	beq.n	8000768 <__aeabi_d2f+0x24>
 800078c:	2080      	movs	r0, #128	; 0x80
 800078e:	03c0      	lsls	r0, r0, #15
 8000790:	4304      	orrs	r4, r0
 8000792:	20ff      	movs	r0, #255	; 0xff
 8000794:	e7ea      	b.n	800076c <__aeabi_d2f+0x28>
 8000796:	2e00      	cmp	r6, #0
 8000798:	dd1b      	ble.n	80007d2 <__aeabi_d2f+0x8e>
 800079a:	0192      	lsls	r2, r2, #6
 800079c:	1e53      	subs	r3, r2, #1
 800079e:	419a      	sbcs	r2, r3
 80007a0:	00e4      	lsls	r4, r4, #3
 80007a2:	0f6d      	lsrs	r5, r5, #29
 80007a4:	4322      	orrs	r2, r4
 80007a6:	432a      	orrs	r2, r5
 80007a8:	0753      	lsls	r3, r2, #29
 80007aa:	d048      	beq.n	800083e <__aeabi_d2f+0xfa>
 80007ac:	230f      	movs	r3, #15
 80007ae:	4013      	ands	r3, r2
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	d000      	beq.n	80007b6 <__aeabi_d2f+0x72>
 80007b4:	3204      	adds	r2, #4
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	04db      	lsls	r3, r3, #19
 80007ba:	4013      	ands	r3, r2
 80007bc:	d03f      	beq.n	800083e <__aeabi_d2f+0xfa>
 80007be:	1c70      	adds	r0, r6, #1
 80007c0:	2efe      	cmp	r6, #254	; 0xfe
 80007c2:	d0d1      	beq.n	8000768 <__aeabi_d2f+0x24>
 80007c4:	0192      	lsls	r2, r2, #6
 80007c6:	0a54      	lsrs	r4, r2, #9
 80007c8:	b2c0      	uxtb	r0, r0
 80007ca:	e7cf      	b.n	800076c <__aeabi_d2f+0x28>
 80007cc:	2000      	movs	r0, #0
 80007ce:	2400      	movs	r4, #0
 80007d0:	e7cc      	b.n	800076c <__aeabi_d2f+0x28>
 80007d2:	0032      	movs	r2, r6
 80007d4:	3217      	adds	r2, #23
 80007d6:	db22      	blt.n	800081e <__aeabi_d2f+0xda>
 80007d8:	2080      	movs	r0, #128	; 0x80
 80007da:	0400      	lsls	r0, r0, #16
 80007dc:	4320      	orrs	r0, r4
 80007de:	241e      	movs	r4, #30
 80007e0:	1ba4      	subs	r4, r4, r6
 80007e2:	2c1f      	cmp	r4, #31
 80007e4:	dd1d      	ble.n	8000822 <__aeabi_d2f+0xde>
 80007e6:	2202      	movs	r2, #2
 80007e8:	4252      	negs	r2, r2
 80007ea:	1b96      	subs	r6, r2, r6
 80007ec:	0002      	movs	r2, r0
 80007ee:	40f2      	lsrs	r2, r6
 80007f0:	0016      	movs	r6, r2
 80007f2:	2c20      	cmp	r4, #32
 80007f4:	d004      	beq.n	8000800 <__aeabi_d2f+0xbc>
 80007f6:	4a15      	ldr	r2, [pc, #84]	; (800084c <__aeabi_d2f+0x108>)
 80007f8:	4694      	mov	ip, r2
 80007fa:	4463      	add	r3, ip
 80007fc:	4098      	lsls	r0, r3
 80007fe:	4305      	orrs	r5, r0
 8000800:	002a      	movs	r2, r5
 8000802:	1e53      	subs	r3, r2, #1
 8000804:	419a      	sbcs	r2, r3
 8000806:	4332      	orrs	r2, r6
 8000808:	2600      	movs	r6, #0
 800080a:	0753      	lsls	r3, r2, #29
 800080c:	d1ce      	bne.n	80007ac <__aeabi_d2f+0x68>
 800080e:	2480      	movs	r4, #128	; 0x80
 8000810:	0013      	movs	r3, r2
 8000812:	04e4      	lsls	r4, r4, #19
 8000814:	2001      	movs	r0, #1
 8000816:	4023      	ands	r3, r4
 8000818:	4222      	tst	r2, r4
 800081a:	d1d3      	bne.n	80007c4 <__aeabi_d2f+0x80>
 800081c:	e7b0      	b.n	8000780 <__aeabi_d2f+0x3c>
 800081e:	2300      	movs	r3, #0
 8000820:	e7ad      	b.n	800077e <__aeabi_d2f+0x3a>
 8000822:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <__aeabi_d2f+0x10c>)
 8000824:	4694      	mov	ip, r2
 8000826:	002a      	movs	r2, r5
 8000828:	40e2      	lsrs	r2, r4
 800082a:	0014      	movs	r4, r2
 800082c:	002a      	movs	r2, r5
 800082e:	4463      	add	r3, ip
 8000830:	409a      	lsls	r2, r3
 8000832:	4098      	lsls	r0, r3
 8000834:	1e55      	subs	r5, r2, #1
 8000836:	41aa      	sbcs	r2, r5
 8000838:	4302      	orrs	r2, r0
 800083a:	4322      	orrs	r2, r4
 800083c:	e7e4      	b.n	8000808 <__aeabi_d2f+0xc4>
 800083e:	0033      	movs	r3, r6
 8000840:	e79e      	b.n	8000780 <__aeabi_d2f+0x3c>
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	000007fe 	.word	0x000007fe
 8000848:	fffffc80 	.word	0xfffffc80
 800084c:	fffffca2 	.word	0xfffffca2
 8000850:	fffffc82 	.word	0xfffffc82

08000854 <__clzsi2>:
 8000854:	211c      	movs	r1, #28
 8000856:	2301      	movs	r3, #1
 8000858:	041b      	lsls	r3, r3, #16
 800085a:	4298      	cmp	r0, r3
 800085c:	d301      	bcc.n	8000862 <__clzsi2+0xe>
 800085e:	0c00      	lsrs	r0, r0, #16
 8000860:	3910      	subs	r1, #16
 8000862:	0a1b      	lsrs	r3, r3, #8
 8000864:	4298      	cmp	r0, r3
 8000866:	d301      	bcc.n	800086c <__clzsi2+0x18>
 8000868:	0a00      	lsrs	r0, r0, #8
 800086a:	3908      	subs	r1, #8
 800086c:	091b      	lsrs	r3, r3, #4
 800086e:	4298      	cmp	r0, r3
 8000870:	d301      	bcc.n	8000876 <__clzsi2+0x22>
 8000872:	0900      	lsrs	r0, r0, #4
 8000874:	3904      	subs	r1, #4
 8000876:	a202      	add	r2, pc, #8	; (adr r2, 8000880 <__clzsi2+0x2c>)
 8000878:	5c10      	ldrb	r0, [r2, r0]
 800087a:	1840      	adds	r0, r0, r1
 800087c:	4770      	bx	lr
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	02020304 	.word	0x02020304
 8000884:	01010101 	.word	0x01010101
	...

08000890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000890:	b590      	push	{r4, r7, lr}
 8000892:	b085      	sub	sp, #20
 8000894:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000896:	f000 fb8f 	bl	8000fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089a:	f000 f831 	bl	8000900 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089e:	f000 f94b 	bl	8000b38 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008a2:	f000 f877 	bl	8000994 <MX_SPI1_Init>
  MX_TIM1_Init();
 80008a6:	f000 f8bb 	bl	8000a20 <MX_TIM1_Init>
  MX_TIM6_Init();
 80008aa:	f000 f923 	bl	8000af4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* CONFIIGURE THE CONTROL DATA BUFFER */

  /* Initialize the entire TX data buffer to 0. */
  for(int i = 0; i < spiSize; i++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	e007      	b.n	80008c4 <main+0x34>
      txData[i] = 0;
 80008b4:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <main+0x58>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	18d3      	adds	r3, r2, r3
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < spiSize; i++)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3301      	adds	r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b13      	cmp	r3, #19
 80008c8:	ddf4      	ble.n	80008b4 <main+0x24>

  /* Configure data to send via SPI*/
  setTxData(txData, &testMode, &out0, &out1, &out2);
 80008ca:	4c08      	ldr	r4, [pc, #32]	; (80008ec <main+0x5c>)
 80008cc:	4a08      	ldr	r2, [pc, #32]	; (80008f0 <main+0x60>)
 80008ce:	4909      	ldr	r1, [pc, #36]	; (80008f4 <main+0x64>)
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <main+0x58>)
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <main+0x68>)
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	0023      	movs	r3, r4
 80008d8:	f000 f976 	bl	8000bc8 <setTxData>

  /* Enable TIM1 interrupt */
  HAL_TIM_Base_Start_IT(&htim1);
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <main+0x6c>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 fed8 	bl	8002694 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <main+0x54>
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	20000120 	.word	0x20000120
 80008ec:	20000148 	.word	0x20000148
 80008f0:	20000001 	.word	0x20000001
 80008f4:	20000000 	.word	0x20000000
 80008f8:	20000002 	.word	0x20000002
 80008fc:	20000090 	.word	0x20000090

08000900 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000900:	b590      	push	{r4, r7, lr}
 8000902:	b091      	sub	sp, #68	; 0x44
 8000904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000906:	2410      	movs	r4, #16
 8000908:	193b      	adds	r3, r7, r4
 800090a:	0018      	movs	r0, r3
 800090c:	2330      	movs	r3, #48	; 0x30
 800090e:	001a      	movs	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	f002 fab1 	bl	8002e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000916:	003b      	movs	r3, r7
 8000918:	0018      	movs	r0, r3
 800091a:	2310      	movs	r3, #16
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f002 faaa 	bl	8002e78 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000924:	0021      	movs	r1, r4
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2202      	movs	r2, #2
 800092a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2201      	movs	r2, #1
 8000930:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2210      	movs	r2, #16
 8000936:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000938:	187b      	adds	r3, r7, r1
 800093a:	2202      	movs	r2, #2
 800093c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	0392      	lsls	r2, r2, #14
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000952:	187b      	adds	r3, r7, r1
 8000954:	0018      	movs	r0, r3
 8000956:	f000 fdff 	bl	8001558 <HAL_RCC_OscConfig>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800095e:	f000 fa25 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	003b      	movs	r3, r7
 8000964:	2207      	movs	r2, #7
 8000966:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	003b      	movs	r3, r7
 800096a:	2202      	movs	r2, #2
 800096c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	003b      	movs	r3, r7
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000974:	003b      	movs	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800097a:	003b      	movs	r3, r7
 800097c:	2101      	movs	r1, #1
 800097e:	0018      	movs	r0, r3
 8000980:	f001 f904 	bl	8001b8c <HAL_RCC_ClockConfig>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000988:	f000 fa10 	bl	8000dac <Error_Handler>
  }
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b011      	add	sp, #68	; 0x44
 8000992:	bd90      	pop	{r4, r7, pc}

08000994 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <MX_SPI1_Init+0x84>)
 800099a:	4a20      	ldr	r2, [pc, #128]	; (8000a1c <MX_SPI1_Init+0x88>)
 800099c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MX_SPI1_Init+0x84>)
 80009a0:	2282      	movs	r2, #130	; 0x82
 80009a2:	0052      	lsls	r2, r2, #1
 80009a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <MX_SPI1_Init+0x84>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_SPI1_Init+0x84>)
 80009ae:	22e0      	movs	r2, #224	; 0xe0
 80009b0:	00d2      	lsls	r2, r2, #3
 80009b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_SPI1_Init+0x84>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_SPI1_Init+0x84>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_SPI1_Init+0x84>)
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	0092      	lsls	r2, r2, #2
 80009c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_SPI1_Init+0x84>)
 80009ca:	2208      	movs	r2, #8
 80009cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_SPI1_Init+0x84>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_SPI1_Init+0x84>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_SPI1_Init+0x84>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <MX_SPI1_Init+0x84>)
 80009e2:	2207      	movs	r2, #7
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_SPI1_Init+0x84>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <MX_SPI1_Init+0x84>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_SPI1_Init+0x84>)
 80009f4:	0018      	movs	r0, r3
 80009f6:	f001 f9ed 	bl	8001dd4 <HAL_SPI_Init>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009fe:	f000 f9d5 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <MX_SPI1_Init+0x84>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <MX_SPI1_Init+0x84>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2140      	movs	r1, #64	; 0x40
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	2000002c 	.word	0x2000002c
 8000a1c:	40013000 	.word	0x40013000

08000a20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	2310      	movs	r3, #16
 8000a28:	18fb      	adds	r3, r7, r3
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	001a      	movs	r2, r3
 8000a30:	2100      	movs	r1, #0
 8000a32:	f002 fa21 	bl	8002e78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a36:	2308      	movs	r3, #8
 8000a38:	18fb      	adds	r3, r7, r3
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	001a      	movs	r2, r3
 8000a40:	2100      	movs	r1, #0
 8000a42:	f002 fa19 	bl	8002e78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <MX_TIM1_Init+0xc4>)
 8000a48:	4a27      	ldr	r2, [pc, #156]	; (8000ae8 <MX_TIM1_Init+0xc8>)
 8000a4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <MX_TIM1_Init+0xc4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <MX_TIM1_Init+0xc4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1250-1;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_TIM1_Init+0xc4>)
 8000a5a:	4a24      	ldr	r2, [pc, #144]	; (8000aec <MX_TIM1_Init+0xcc>)
 8000a5c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_TIM1_Init+0xc4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_TIM1_Init+0xc4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_TIM1_Init+0xc4>)
 8000a6c:	2280      	movs	r2, #128	; 0x80
 8000a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_TIM1_Init+0xc4>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f001 fdbe 	bl	80025f4 <HAL_TIM_Base_Init>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8000a7c:	f000 f996 	bl	8000dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a80:	2110      	movs	r1, #16
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	0152      	lsls	r2, r2, #5
 8000a88:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a8a:	187a      	adds	r2, r7, r1
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_TIM1_Init+0xc4>)
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f001 ff61 	bl	8002958 <HAL_TIM_ConfigClockSource>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000a9a:	f000 f987 	bl	8000dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9e:	2108      	movs	r1, #8
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aac:	187a      	adds	r2, r7, r1
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_TIM1_Init+0xc4>)
 8000ab0:	0011      	movs	r1, r2
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f002 f954 	bl	8002d60 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000abc:	f000 f976 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_TIM1_Init+0xd0>)
 8000ac2:	699a      	ldr	r2, [r3, #24]
 8000ac4:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <MX_TIM1_Init+0xd0>)
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	0109      	lsls	r1, r1, #4
 8000aca:	430a      	orrs	r2, r1
 8000acc:	619a      	str	r2, [r3, #24]
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_TIM1_Init+0xd0>)
 8000ad0:	699a      	ldr	r2, [r3, #24]
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	011b      	lsls	r3, r3, #4
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM1_Init 2 */

}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b008      	add	sp, #32
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000090 	.word	0x20000090
 8000ae8:	40012c00 	.word	0x40012c00
 8000aec:	000004e1 	.word	0x000004e1
 8000af0:	40021000 	.word	0x40021000

08000af4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_TIM6_Init+0x38>)
 8000afa:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <MX_TIM6_Init+0x3c>)
 8000afc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_TIM6_Init+0x38>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_TIM6_Init+0x38>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_TIM6_Init+0x38>)
 8000b0c:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <MX_TIM6_Init+0x40>)
 8000b0e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_TIM6_Init+0x38>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <MX_TIM6_Init+0x38>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 fd6b 	bl	80025f4 <HAL_TIM_Base_Init>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM6_Init+0x32>
  {
    Error_Handler();
 8000b22:	f000 f943 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200000d8 	.word	0x200000d8
 8000b30:	40001000 	.word	0x40001000
 8000b34:	0000c350 	.word	0x0000c350

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	240c      	movs	r4, #12
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	0018      	movs	r0, r3
 8000b44:	2314      	movs	r3, #20
 8000b46:	001a      	movs	r2, r3
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f002 f995 	bl	8002e78 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_GPIO_Init+0x88>)
 8000b50:	695a      	ldr	r2, [r3, #20]
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_GPIO_Init+0x88>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0289      	lsls	r1, r1, #10
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	615a      	str	r2, [r3, #20]
 8000b5c:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_GPIO_Init+0x88>)
 8000b5e:	695a      	ldr	r2, [r3, #20]
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	029b      	lsls	r3, r3, #10
 8000b64:	4013      	ands	r3, r2
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_GPIO_Init+0x88>)
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_GPIO_Init+0x88>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	0309      	lsls	r1, r1, #12
 8000b74:	430a      	orrs	r2, r1
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_GPIO_Init+0x88>)
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	031b      	lsls	r3, r3, #12
 8000b80:	4013      	ands	r3, r2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_SET);
 8000b86:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_GPIO_Init+0x8c>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f000 fcc5 	bl	800151c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_SS_Pin */
  GPIO_InitStruct.Pin = SPI1_SS_Pin;
 8000b92:	0021      	movs	r1, r4
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2210      	movs	r2, #16
 8000b98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2203      	movs	r2, #3
 8000baa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_SS_GPIO_Port, &GPIO_InitStruct);
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <MX_GPIO_Init+0x8c>)
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	0010      	movs	r0, r2
 8000bb4:	f000 fb42 	bl	800123c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b009      	add	sp, #36	; 0x24
 8000bbe:	bd90      	pop	{r4, r7, pc}
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	48000800 	.word	0x48000800

08000bc8 <setTxData>:

/* USER CODE BEGIN 4 */

/* Configuring the MOSI line bits */
uint8_t* setTxData(uint8_t* txData, bool* testMode, bool* out0, bool* out1, bool* out2)
  {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	603b      	str	r3, [r7, #0]

    /* Test mode is the MSbit of the CW (second byte, last bit). If it is 0, mode is automatic. If 1, mode is manual. */
    if(*testMode)
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d008      	beq.n	8000bf0 <setTxData+0x28>
      txData[0] |= (1u << 7);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	4252      	negs	r2, r2
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	e006      	b.n	8000bfe <setTxData+0x36>
    else
      txData[0] &= ~(1u << 7);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	227f      	movs	r2, #127	; 0x7f
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	701a      	strb	r2, [r3, #0]

    /* Configuring commands for GPO pins */
    if(*out0)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d009      	beq.n	8000c1a <setTxData+0x52>
      txData[1] |= (1u << 0);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	781a      	ldrb	r2, [r3, #0]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	2101      	movs	r1, #1
 8000c12:	430a      	orrs	r2, r1
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	701a      	strb	r2, [r3, #0]
 8000c18:	e008      	b.n	8000c2c <setTxData+0x64>
    else
      txData[1] &= ~(1u << 0);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	781a      	ldrb	r2, [r3, #0]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3301      	adds	r3, #1
 8000c24:	2101      	movs	r1, #1
 8000c26:	438a      	bics	r2, r1
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	701a      	strb	r2, [r3, #0]

    if(*out1)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d009      	beq.n	8000c48 <setTxData+0x80>
      txData[1] |= (1u << 1);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	3301      	adds	r3, #1
 8000c38:	781a      	ldrb	r2, [r3, #0]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	2102      	movs	r1, #2
 8000c40:	430a      	orrs	r2, r1
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	e008      	b.n	8000c5a <setTxData+0x92>
    else
      txData[1] &= ~(1u << 1);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	781a      	ldrb	r2, [r3, #0]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	3301      	adds	r3, #1
 8000c52:	2102      	movs	r1, #2
 8000c54:	438a      	bics	r2, r1
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	701a      	strb	r2, [r3, #0]

    if(*out2)
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d009      	beq.n	8000c76 <setTxData+0xae>
      txData[1] |= (1u << 2);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	3301      	adds	r3, #1
 8000c66:	781a      	ldrb	r2, [r3, #0]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	701a      	strb	r2, [r3, #0]
 8000c74:	e008      	b.n	8000c88 <setTxData+0xc0>
    else
      txData[1] &= ~(1u << 2);
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	781a      	ldrb	r2, [r3, #0]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	2104      	movs	r1, #4
 8000c82:	438a      	bics	r2, r1
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	701a      	strb	r2, [r3, #0]

    return txData;
 8000c88:	68fb      	ldr	r3, [r7, #12]
   }
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b004      	add	sp, #16
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <readADC>:


/* Reading the ADC data from the MISO line, by byte pairs */
uint16_t* readADC(uint16_t* adcData)
  {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
     for(int i = 1; i <= adcWords; i++)
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	e01d      	b.n	8000cde <readADC+0x4a>
         adcData[i-1] = (uint16_t)( (uint16_t)(rxData[2*i+1] & 0x0F) << 8 | rxData[2*i] ); /* ENDIAN!!! */
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a11      	ldr	r2, [pc, #68]	; (8000cf0 <readADC+0x5c>)
 8000caa:	5cd3      	ldrb	r3, [r2, r3]
 8000cac:	021b      	lsls	r3, r3, #8
 8000cae:	b21a      	sxth	r2, r3
 8000cb0:	23f0      	movs	r3, #240	; 0xf0
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	b21a      	sxth	r2, r3
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <readADC+0x5c>)
 8000cbe:	5ccb      	ldrb	r3, [r1, r3]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	b219      	sxth	r1, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <readADC+0x60>)
 8000cca:	4694      	mov	ip, r2
 8000ccc:	4463      	add	r3, ip
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	18d3      	adds	r3, r2, r3
 8000cd4:	b28a      	uxth	r2, r1
 8000cd6:	801a      	strh	r2, [r3, #0]
     for(int i = 1; i <= adcWords; i++)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2b06      	cmp	r3, #6
 8000ce2:	ddde      	ble.n	8000ca2 <readADC+0xe>

     return adcData;
 8000ce4:	687b      	ldr	r3, [r7, #4]
  }
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b004      	add	sp, #16
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	20000134 	.word	0x20000134
 8000cf4:	7fffffff 	.word	0x7fffffff

08000cf8 <HAL_TIM_PeriodElapsedCallback>:
      readADC(adcData);
  }

/* 31.25us timer callback function, for SPI communication */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	6078      	str	r0, [r7, #4]
	/* Timer 1 elapsed */
    if (htim->Instance == TIM1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a1f      	ldr	r2, [pc, #124]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d138      	bne.n	8000d7c <HAL_TIM_PeriodElapsedCallback+0x84>
    {
          /* Benchmarking */
    	  /* Reset TIM6 counter */
    	  TIM6->CNT = 0;
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24
          /* Start TIM6 counter */
     	  TIM6->CR1 |= TIM_CR1_CEN;
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d16:	2101      	movs	r1, #1
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	601a      	str	r2, [r3, #0]

			 HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_RESET);   /* Pull SS pin LOW */
 8000d1c:	4b1b      	ldr	r3, [pc, #108]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2110      	movs	r1, #16
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 fbfa 	bl	800151c <HAL_GPIO_WritePin>

			 HAL_SPI_TransmitReceive(&hspi1, txData, rxData, spiSize, 5);         /* Transmit and receive (FULL-DUPLEX) */
 8000d28:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d2a:	491a      	ldr	r1, [pc, #104]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d2c:	481a      	ldr	r0, [pc, #104]	; (8000d98 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000d2e:	2305      	movs	r3, #5
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2314      	movs	r3, #20
 8000d34:	f001 f906 	bl	8001f44 <HAL_SPI_TransmitReceive>

			 HAL_GPIO_WritePin(SPI1_SS_GPIO_Port, SPI1_SS_Pin, GPIO_PIN_SET);     /* Pull SS pin HIGH */
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 fbec 	bl	800151c <HAL_GPIO_WritePin>

			 /* Handle received data */
			 readADC(adcData);
 8000d44:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff ffa4 	bl	8000c94 <readADC>

             /* Benchmarking */
             /* Stop TIM6 counter */
    		 TIM6->CR1 &= ~TIM_CR1_CEN;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d52:	2101      	movs	r1, #1
 8000d54:	438a      	bics	r2, r1
 8000d56:	601a      	str	r2, [r3, #0]
    		 /* Obtain the elapsed time */
    		 elapsedTime = TIM6->CNT*0.025; /* Elapsed time for TIM6 in microseconds */
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff fccb 	bl	80006f8 <__aeabi_ui2d>
 8000d62:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000d66:	f7ff fa5b 	bl	8000220 <__aeabi_dmul>
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	000b      	movs	r3, r1
 8000d6e:	0010      	movs	r0, r2
 8000d70:	0019      	movs	r1, r3
 8000d72:	f7ff fce7 	bl	8000744 <__aeabi_d2f>
 8000d76:	1c02      	adds	r2, r0, #0
 8000d78:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000d7a:	601a      	str	r2, [r3, #0]
      }

}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b002      	add	sp, #8
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40012c00 	.word	0x40012c00
 8000d88:	40001000 	.word	0x40001000
 8000d8c:	48000800 	.word	0x48000800
 8000d90:	20000134 	.word	0x20000134
 8000d94:	20000120 	.word	0x20000120
 8000d98:	2000002c 	.word	0x2000002c
 8000d9c:	2000014c 	.word	0x2000014c
 8000da0:	9999999a 	.word	0x9999999a
 8000da4:	3f999999 	.word	0x3f999999
 8000da8:	20000158 	.word	0x20000158

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <Error_Handler+0x8>
	...

08000db8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_MspInit+0x44>)
 8000dc0:	699a      	ldr	r2, [r3, #24]
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <HAL_MspInit+0x44>)
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	619a      	str	r2, [r3, #24]
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_MspInit+0x44>)
 8000dcc:	699b      	ldr	r3, [r3, #24]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <HAL_MspInit+0x44>)
 8000dd8:	69da      	ldr	r2, [r3, #28]
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_MspInit+0x44>)
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	0549      	lsls	r1, r1, #21
 8000de0:	430a      	orrs	r2, r1
 8000de2:	61da      	str	r2, [r3, #28]
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_MspInit+0x44>)
 8000de6:	69da      	ldr	r2, [r3, #28]
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	055b      	lsls	r3, r3, #21
 8000dec:	4013      	ands	r3, r2
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b002      	add	sp, #8
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	40021000 	.word	0x40021000

08000e00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b08b      	sub	sp, #44	; 0x2c
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	2414      	movs	r4, #20
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	2314      	movs	r3, #20
 8000e10:	001a      	movs	r2, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	f002 f830 	bl	8002e78 <memset>
  if(hspi->Instance==SPI1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <HAL_SPI_MspInit+0x90>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d132      	bne.n	8000e88 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_SPI_MspInit+0x94>)
 8000e24:	699a      	ldr	r2, [r3, #24]
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_SPI_MspInit+0x94>)
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	0149      	lsls	r1, r1, #5
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	619a      	str	r2, [r3, #24]
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_SPI_MspInit+0x94>)
 8000e32:	699a      	ldr	r2, [r3, #24]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	015b      	lsls	r3, r3, #5
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_SPI_MspInit+0x94>)
 8000e40:	695a      	ldr	r2, [r3, #20]
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_SPI_MspInit+0x94>)
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	0289      	lsls	r1, r1, #10
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	615a      	str	r2, [r3, #20]
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_SPI_MspInit+0x94>)
 8000e4e:	695a      	ldr	r2, [r3, #20]
 8000e50:	2380      	movs	r3, #128	; 0x80
 8000e52:	029b      	lsls	r3, r3, #10
 8000e54:	4013      	ands	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e5a:	0021      	movs	r1, r4
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	22e0      	movs	r2, #224	; 0xe0
 8000e60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2202      	movs	r2, #2
 8000e66:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2203      	movs	r2, #3
 8000e72:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	187a      	adds	r2, r7, r1
 8000e7c:	2390      	movs	r3, #144	; 0x90
 8000e7e:	05db      	lsls	r3, r3, #23
 8000e80:	0011      	movs	r1, r2
 8000e82:	0018      	movs	r0, r3
 8000e84:	f000 f9da 	bl	800123c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b00b      	add	sp, #44	; 0x2c
 8000e8e:	bd90      	pop	{r4, r7, pc}
 8000e90:	40013000 	.word	0x40013000
 8000e94:	40021000 	.word	0x40021000

08000e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <HAL_TIM_Base_MspInit+0x6c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d116      	bne.n	8000ed8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_TIM_Base_MspInit+0x70>)
 8000eac:	699a      	ldr	r2, [r3, #24]
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_TIM_Base_MspInit+0x70>)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	0109      	lsls	r1, r1, #4
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	619a      	str	r2, [r3, #24]
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_TIM_Base_MspInit+0x70>)
 8000eba:	699a      	ldr	r2, [r3, #24]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	200d      	movs	r0, #13
 8000ecc:	f000 f984 	bl	80011d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000ed0:	200d      	movs	r0, #13
 8000ed2:	f000 f996 	bl	8001202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000ed6:	e010      	b.n	8000efa <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM6)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <HAL_TIM_Base_MspInit+0x74>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d10b      	bne.n	8000efa <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_TIM_Base_MspInit+0x70>)
 8000ee4:	69da      	ldr	r2, [r3, #28]
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_TIM_Base_MspInit+0x70>)
 8000ee8:	2110      	movs	r1, #16
 8000eea:	430a      	orrs	r2, r1
 8000eec:	61da      	str	r2, [r3, #28]
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_TIM_Base_MspInit+0x70>)
 8000ef0:	69db      	ldr	r3, [r3, #28]
 8000ef2:	2210      	movs	r2, #16
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b004      	add	sp, #16
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	40012c00 	.word	0x40012c00
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40001000 	.word	0x40001000

08000f10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <NMI_Handler+0x4>

08000f16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <HardFault_Handler+0x4>

08000f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f888 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f001 fbf0 	bl	800272c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000f4c:	46c0      	nop			; (mov r8, r8)
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	20000090 	.word	0x20000090

08000f58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f68:	f7ff fff6 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f6e:	490d      	ldr	r1, [pc, #52]	; (8000fa4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f70:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <LoopForever+0xe>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f84:	4c0a      	ldr	r4, [pc, #40]	; (8000fb0 <LoopForever+0x16>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f92:	f001 ff4d 	bl	8002e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f96:	f7ff fc7b 	bl	8000890 <main>

08000f9a <LoopForever>:

LoopForever:
    b LoopForever
 8000f9a:	e7fe      	b.n	8000f9a <LoopForever>
  ldr   r0, =_estack
 8000f9c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000fa8:	08002f18 	.word	0x08002f18
  ldr r2, =_sbss
 8000fac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000fb0:	20000160 	.word	0x20000160

08000fb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fb4:	e7fe      	b.n	8000fb4 <ADC1_IRQHandler>
	...

08000fb8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <HAL_Init+0x24>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_Init+0x24>)
 8000fc2:	2110      	movs	r1, #16
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f809 	bl	8000fe0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fce:	f7ff fef3 	bl	8000db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	40022000 	.word	0x40022000

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <HAL_InitTick+0x5c>)
 8000fea:	681c      	ldr	r4, [r3, #0]
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_InitTick+0x60>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	23fa      	movs	r3, #250	; 0xfa
 8000ff4:	0098      	lsls	r0, r3, #2
 8000ff6:	f7ff f887 	bl	8000108 <__udivsi3>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	0019      	movs	r1, r3
 8000ffe:	0020      	movs	r0, r4
 8001000:	f7ff f882 	bl	8000108 <__udivsi3>
 8001004:	0003      	movs	r3, r0
 8001006:	0018      	movs	r0, r3
 8001008:	f000 f90b 	bl	8001222 <HAL_SYSTICK_Config>
 800100c:	1e03      	subs	r3, r0, #0
 800100e:	d001      	beq.n	8001014 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e00f      	b.n	8001034 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d80b      	bhi.n	8001032 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	2301      	movs	r3, #1
 800101e:	425b      	negs	r3, r3
 8001020:	2200      	movs	r2, #0
 8001022:	0018      	movs	r0, r3
 8001024:	f000 f8d8 	bl	80011d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_InitTick+0x64>)
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	b003      	add	sp, #12
 800103a:	bd90      	pop	{r4, r7, pc}
 800103c:	20000004 	.word	0x20000004
 8001040:	2000000c 	.word	0x2000000c
 8001044:	20000008 	.word	0x20000008

08001048 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <HAL_IncTick+0x1c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	001a      	movs	r2, r3
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <HAL_IncTick+0x20>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	18d2      	adds	r2, r2, r3
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_IncTick+0x20>)
 800105a:	601a      	str	r2, [r3, #0]
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	2000000c 	.word	0x2000000c
 8001068:	2000015c 	.word	0x2000015c

0800106c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b02      	ldr	r3, [pc, #8]	; (800107c <HAL_GetTick+0x10>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	2000015c 	.word	0x2000015c

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	0002      	movs	r2, r0
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b7f      	cmp	r3, #127	; 0x7f
 8001092:	d809      	bhi.n	80010a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001094:	1dfb      	adds	r3, r7, #7
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	001a      	movs	r2, r3
 800109a:	231f      	movs	r3, #31
 800109c:	401a      	ands	r2, r3
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_EnableIRQ+0x30>)
 80010a0:	2101      	movs	r1, #1
 80010a2:	4091      	lsls	r1, r2
 80010a4:	000a      	movs	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]
  }
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	0002      	movs	r2, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b7f      	cmp	r3, #127	; 0x7f
 80010c8:	d828      	bhi.n	800111c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ca:	4a2f      	ldr	r2, [pc, #188]	; (8001188 <__NVIC_SetPriority+0xd4>)
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b25b      	sxtb	r3, r3
 80010d2:	089b      	lsrs	r3, r3, #2
 80010d4:	33c0      	adds	r3, #192	; 0xc0
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	589b      	ldr	r3, [r3, r2]
 80010da:	1dfa      	adds	r2, r7, #7
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	0011      	movs	r1, r2
 80010e0:	2203      	movs	r2, #3
 80010e2:	400a      	ands	r2, r1
 80010e4:	00d2      	lsls	r2, r2, #3
 80010e6:	21ff      	movs	r1, #255	; 0xff
 80010e8:	4091      	lsls	r1, r2
 80010ea:	000a      	movs	r2, r1
 80010ec:	43d2      	mvns	r2, r2
 80010ee:	401a      	ands	r2, r3
 80010f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	019b      	lsls	r3, r3, #6
 80010f6:	22ff      	movs	r2, #255	; 0xff
 80010f8:	401a      	ands	r2, r3
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	0018      	movs	r0, r3
 8001100:	2303      	movs	r3, #3
 8001102:	4003      	ands	r3, r0
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001108:	481f      	ldr	r0, [pc, #124]	; (8001188 <__NVIC_SetPriority+0xd4>)
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b25b      	sxtb	r3, r3
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	430a      	orrs	r2, r1
 8001114:	33c0      	adds	r3, #192	; 0xc0
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800111a:	e031      	b.n	8001180 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800111c:	4a1b      	ldr	r2, [pc, #108]	; (800118c <__NVIC_SetPriority+0xd8>)
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	0019      	movs	r1, r3
 8001124:	230f      	movs	r3, #15
 8001126:	400b      	ands	r3, r1
 8001128:	3b08      	subs	r3, #8
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	3306      	adds	r3, #6
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	18d3      	adds	r3, r2, r3
 8001132:	3304      	adds	r3, #4
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	1dfa      	adds	r2, r7, #7
 8001138:	7812      	ldrb	r2, [r2, #0]
 800113a:	0011      	movs	r1, r2
 800113c:	2203      	movs	r2, #3
 800113e:	400a      	ands	r2, r1
 8001140:	00d2      	lsls	r2, r2, #3
 8001142:	21ff      	movs	r1, #255	; 0xff
 8001144:	4091      	lsls	r1, r2
 8001146:	000a      	movs	r2, r1
 8001148:	43d2      	mvns	r2, r2
 800114a:	401a      	ands	r2, r3
 800114c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	019b      	lsls	r3, r3, #6
 8001152:	22ff      	movs	r2, #255	; 0xff
 8001154:	401a      	ands	r2, r3
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	0018      	movs	r0, r3
 800115c:	2303      	movs	r3, #3
 800115e:	4003      	ands	r3, r0
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001164:	4809      	ldr	r0, [pc, #36]	; (800118c <__NVIC_SetPriority+0xd8>)
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	001c      	movs	r4, r3
 800116c:	230f      	movs	r3, #15
 800116e:	4023      	ands	r3, r4
 8001170:	3b08      	subs	r3, #8
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	430a      	orrs	r2, r1
 8001176:	3306      	adds	r3, #6
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	18c3      	adds	r3, r0, r3
 800117c:	3304      	adds	r3, #4
 800117e:	601a      	str	r2, [r3, #0]
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	b003      	add	sp, #12
 8001186:	bd90      	pop	{r4, r7, pc}
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	1e5a      	subs	r2, r3, #1
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	045b      	lsls	r3, r3, #17
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d301      	bcc.n	80011a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a4:	2301      	movs	r3, #1
 80011a6:	e010      	b.n	80011ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <SysTick_Config+0x44>)
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	3a01      	subs	r2, #1
 80011ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b0:	2301      	movs	r3, #1
 80011b2:	425b      	negs	r3, r3
 80011b4:	2103      	movs	r1, #3
 80011b6:	0018      	movs	r0, r3
 80011b8:	f7ff ff7c 	bl	80010b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <SysTick_Config+0x44>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <SysTick_Config+0x44>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	0018      	movs	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b002      	add	sp, #8
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	210f      	movs	r1, #15
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	1c02      	adds	r2, r0, #0
 80011e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	187b      	adds	r3, r7, r1
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	0011      	movs	r1, r2
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7ff ff5d 	bl	80010b4 <__NVIC_SetPriority>
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b004      	add	sp, #16
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b082      	sub	sp, #8
 8001206:	af00      	add	r7, sp, #0
 8001208:	0002      	movs	r2, r0
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b25b      	sxtb	r3, r3
 8001214:	0018      	movs	r0, r3
 8001216:	f7ff ff33 	bl	8001080 <__NVIC_EnableIRQ>
}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	46bd      	mov	sp, r7
 800121e:	b002      	add	sp, #8
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	0018      	movs	r0, r3
 800122e:	f7ff ffaf 	bl	8001190 <SysTick_Config>
 8001232:	0003      	movs	r3, r0
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	b002      	add	sp, #8
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	e14f      	b.n	80014ec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2101      	movs	r1, #1
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4091      	lsls	r1, r2
 8001256:	000a      	movs	r2, r1
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d100      	bne.n	8001264 <HAL_GPIO_Init+0x28>
 8001262:	e140      	b.n	80014e6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2203      	movs	r2, #3
 800126a:	4013      	ands	r3, r2
 800126c:	2b01      	cmp	r3, #1
 800126e:	d005      	beq.n	800127c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2203      	movs	r2, #3
 8001276:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001278:	2b02      	cmp	r3, #2
 800127a:	d130      	bne.n	80012de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	409a      	lsls	r2, r3
 800128a:	0013      	movs	r3, r2
 800128c:	43da      	mvns	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b2:	2201      	movs	r2, #1
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	43da      	mvns	r2, r3
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	2201      	movs	r2, #1
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
 80012d0:	0013      	movs	r3, r2
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2203      	movs	r2, #3
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d017      	beq.n	800131a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2203      	movs	r2, #3
 8001320:	4013      	ands	r3, r2
 8001322:	2b02      	cmp	r3, #2
 8001324:	d123      	bne.n	800136e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3208      	adds	r2, #8
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	58d3      	ldr	r3, [r2, r3]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2207      	movs	r2, #7
 8001338:	4013      	ands	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	43da      	mvns	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	691a      	ldr	r2, [r3, #16]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2107      	movs	r1, #7
 8001352:	400b      	ands	r3, r1
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	6939      	ldr	r1, [r7, #16]
 800136c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2203      	movs	r2, #3
 800138c:	401a      	ands	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	23c0      	movs	r3, #192	; 0xc0
 80013a8:	029b      	lsls	r3, r3, #10
 80013aa:	4013      	ands	r3, r2
 80013ac:	d100      	bne.n	80013b0 <HAL_GPIO_Init+0x174>
 80013ae:	e09a      	b.n	80014e6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b0:	4b54      	ldr	r3, [pc, #336]	; (8001504 <HAL_GPIO_Init+0x2c8>)
 80013b2:	699a      	ldr	r2, [r3, #24]
 80013b4:	4b53      	ldr	r3, [pc, #332]	; (8001504 <HAL_GPIO_Init+0x2c8>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	430a      	orrs	r2, r1
 80013ba:	619a      	str	r2, [r3, #24]
 80013bc:	4b51      	ldr	r3, [pc, #324]	; (8001504 <HAL_GPIO_Init+0x2c8>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	2201      	movs	r2, #1
 80013c2:	4013      	ands	r3, r2
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013c8:	4a4f      	ldr	r2, [pc, #316]	; (8001508 <HAL_GPIO_Init+0x2cc>)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	3302      	adds	r3, #2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	589b      	ldr	r3, [r3, r2]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	2203      	movs	r2, #3
 80013da:	4013      	ands	r3, r2
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	220f      	movs	r2, #15
 80013e0:	409a      	lsls	r2, r3
 80013e2:	0013      	movs	r3, r2
 80013e4:	43da      	mvns	r2, r3
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	2390      	movs	r3, #144	; 0x90
 80013f0:	05db      	lsls	r3, r3, #23
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d013      	beq.n	800141e <HAL_GPIO_Init+0x1e2>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a44      	ldr	r2, [pc, #272]	; (800150c <HAL_GPIO_Init+0x2d0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00d      	beq.n	800141a <HAL_GPIO_Init+0x1de>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a43      	ldr	r2, [pc, #268]	; (8001510 <HAL_GPIO_Init+0x2d4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d007      	beq.n	8001416 <HAL_GPIO_Init+0x1da>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a42      	ldr	r2, [pc, #264]	; (8001514 <HAL_GPIO_Init+0x2d8>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d101      	bne.n	8001412 <HAL_GPIO_Init+0x1d6>
 800140e:	2303      	movs	r3, #3
 8001410:	e006      	b.n	8001420 <HAL_GPIO_Init+0x1e4>
 8001412:	2305      	movs	r3, #5
 8001414:	e004      	b.n	8001420 <HAL_GPIO_Init+0x1e4>
 8001416:	2302      	movs	r3, #2
 8001418:	e002      	b.n	8001420 <HAL_GPIO_Init+0x1e4>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_GPIO_Init+0x1e4>
 800141e:	2300      	movs	r3, #0
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	2103      	movs	r1, #3
 8001424:	400a      	ands	r2, r1
 8001426:	0092      	lsls	r2, r2, #2
 8001428:	4093      	lsls	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001430:	4935      	ldr	r1, [pc, #212]	; (8001508 <HAL_GPIO_Init+0x2cc>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143e:	4b36      	ldr	r3, [pc, #216]	; (8001518 <HAL_GPIO_Init+0x2dc>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43da      	mvns	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	035b      	lsls	r3, r3, #13
 8001456:	4013      	ands	r3, r2
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001462:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <HAL_GPIO_Init+0x2dc>)
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001468:	4b2b      	ldr	r3, [pc, #172]	; (8001518 <HAL_GPIO_Init+0x2dc>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43da      	mvns	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	039b      	lsls	r3, r3, #14
 8001480:	4013      	ands	r3, r2
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_GPIO_Init+0x2dc>)
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_GPIO_Init+0x2dc>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	2380      	movs	r3, #128	; 0x80
 80014a8:	029b      	lsls	r3, r3, #10
 80014aa:	4013      	ands	r3, r2
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_GPIO_Init+0x2dc>)
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_GPIO_Init+0x2dc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43da      	mvns	r2, r3
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	025b      	lsls	r3, r3, #9
 80014d4:	4013      	ands	r3, r2
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_GPIO_Init+0x2dc>)
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	40da      	lsrs	r2, r3
 80014f4:	1e13      	subs	r3, r2, #0
 80014f6:	d000      	beq.n	80014fa <HAL_GPIO_Init+0x2be>
 80014f8:	e6a8      	b.n	800124c <HAL_GPIO_Init+0x10>
  } 
}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b006      	add	sp, #24
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	40010000 	.word	0x40010000
 800150c:	48000400 	.word	0x48000400
 8001510:	48000800 	.word	0x48000800
 8001514:	48000c00 	.word	0x48000c00
 8001518:	40010400 	.word	0x40010400

0800151c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	0008      	movs	r0, r1
 8001526:	0011      	movs	r1, r2
 8001528:	1cbb      	adds	r3, r7, #2
 800152a:	1c02      	adds	r2, r0, #0
 800152c:	801a      	strh	r2, [r3, #0]
 800152e:	1c7b      	adds	r3, r7, #1
 8001530:	1c0a      	adds	r2, r1, #0
 8001532:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001534:	1c7b      	adds	r3, r7, #1
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d004      	beq.n	8001546 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800153c:	1cbb      	adds	r3, r7, #2
 800153e:	881a      	ldrh	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001544:	e003      	b.n	800154e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001546:	1cbb      	adds	r3, r7, #2
 8001548:	881a      	ldrh	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e301      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2201      	movs	r2, #1
 8001570:	4013      	ands	r3, r2
 8001572:	d100      	bne.n	8001576 <HAL_RCC_OscConfig+0x1e>
 8001574:	e08d      	b.n	8001692 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001576:	4bc3      	ldr	r3, [pc, #780]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	220c      	movs	r2, #12
 800157c:	4013      	ands	r3, r2
 800157e:	2b04      	cmp	r3, #4
 8001580:	d00e      	beq.n	80015a0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001582:	4bc0      	ldr	r3, [pc, #768]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	220c      	movs	r2, #12
 8001588:	4013      	ands	r3, r2
 800158a:	2b08      	cmp	r3, #8
 800158c:	d116      	bne.n	80015bc <HAL_RCC_OscConfig+0x64>
 800158e:	4bbd      	ldr	r3, [pc, #756]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	025b      	lsls	r3, r3, #9
 8001596:	401a      	ands	r2, r3
 8001598:	2380      	movs	r3, #128	; 0x80
 800159a:	025b      	lsls	r3, r3, #9
 800159c:	429a      	cmp	r2, r3
 800159e:	d10d      	bne.n	80015bc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a0:	4bb8      	ldr	r3, [pc, #736]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	029b      	lsls	r3, r3, #10
 80015a8:	4013      	ands	r3, r2
 80015aa:	d100      	bne.n	80015ae <HAL_RCC_OscConfig+0x56>
 80015ac:	e070      	b.n	8001690 <HAL_RCC_OscConfig+0x138>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d000      	beq.n	80015b8 <HAL_RCC_OscConfig+0x60>
 80015b6:	e06b      	b.n	8001690 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e2d8      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d107      	bne.n	80015d4 <HAL_RCC_OscConfig+0x7c>
 80015c4:	4baf      	ldr	r3, [pc, #700]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4bae      	ldr	r3, [pc, #696]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80015ca:	2180      	movs	r1, #128	; 0x80
 80015cc:	0249      	lsls	r1, r1, #9
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e02f      	b.n	8001634 <HAL_RCC_OscConfig+0xdc>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10c      	bne.n	80015f6 <HAL_RCC_OscConfig+0x9e>
 80015dc:	4ba9      	ldr	r3, [pc, #676]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4ba8      	ldr	r3, [pc, #672]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	49a9      	ldr	r1, [pc, #676]	; (8001888 <HAL_RCC_OscConfig+0x330>)
 80015e4:	400a      	ands	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	4ba6      	ldr	r3, [pc, #664]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4ba5      	ldr	r3, [pc, #660]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	49a7      	ldr	r1, [pc, #668]	; (800188c <HAL_RCC_OscConfig+0x334>)
 80015f0:	400a      	ands	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e01e      	b.n	8001634 <HAL_RCC_OscConfig+0xdc>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d10e      	bne.n	800161c <HAL_RCC_OscConfig+0xc4>
 80015fe:	4ba1      	ldr	r3, [pc, #644]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4ba0      	ldr	r3, [pc, #640]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	02c9      	lsls	r1, r1, #11
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	4b9d      	ldr	r3, [pc, #628]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b9c      	ldr	r3, [pc, #624]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 8001612:	2180      	movs	r1, #128	; 0x80
 8001614:	0249      	lsls	r1, r1, #9
 8001616:	430a      	orrs	r2, r1
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0xdc>
 800161c:	4b99      	ldr	r3, [pc, #612]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b98      	ldr	r3, [pc, #608]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 8001622:	4999      	ldr	r1, [pc, #612]	; (8001888 <HAL_RCC_OscConfig+0x330>)
 8001624:	400a      	ands	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	4b96      	ldr	r3, [pc, #600]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b95      	ldr	r3, [pc, #596]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 800162e:	4997      	ldr	r1, [pc, #604]	; (800188c <HAL_RCC_OscConfig+0x334>)
 8001630:	400a      	ands	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d014      	beq.n	8001666 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fd16 	bl	800106c <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001646:	f7ff fd11 	bl	800106c <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b64      	cmp	r3, #100	; 0x64
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e28a      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001658:	4b8a      	ldr	r3, [pc, #552]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	029b      	lsls	r3, r3, #10
 8001660:	4013      	ands	r3, r2
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0xee>
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001666:	f7ff fd01 	bl	800106c <HAL_GetTick>
 800166a:	0003      	movs	r3, r0
 800166c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fcfc 	bl	800106c <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e275      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	4b80      	ldr	r3, [pc, #512]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	029b      	lsls	r3, r3, #10
 800168a:	4013      	ands	r3, r2
 800168c:	d1f0      	bne.n	8001670 <HAL_RCC_OscConfig+0x118>
 800168e:	e000      	b.n	8001692 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001690:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2202      	movs	r2, #2
 8001698:	4013      	ands	r3, r2
 800169a:	d100      	bne.n	800169e <HAL_RCC_OscConfig+0x146>
 800169c:	e069      	b.n	8001772 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800169e:	4b79      	ldr	r3, [pc, #484]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	220c      	movs	r2, #12
 80016a4:	4013      	ands	r3, r2
 80016a6:	d00b      	beq.n	80016c0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016a8:	4b76      	ldr	r3, [pc, #472]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	220c      	movs	r2, #12
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b08      	cmp	r3, #8
 80016b2:	d11c      	bne.n	80016ee <HAL_RCC_OscConfig+0x196>
 80016b4:	4b73      	ldr	r3, [pc, #460]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	025b      	lsls	r3, r3, #9
 80016bc:	4013      	ands	r3, r2
 80016be:	d116      	bne.n	80016ee <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c0:	4b70      	ldr	r3, [pc, #448]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2202      	movs	r2, #2
 80016c6:	4013      	ands	r3, r2
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x17e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e24b      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4b6b      	ldr	r3, [pc, #428]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	22f8      	movs	r2, #248	; 0xf8
 80016dc:	4393      	bics	r3, r2
 80016de:	0019      	movs	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	00da      	lsls	r2, r3, #3
 80016e6:	4b67      	ldr	r3, [pc, #412]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ec:	e041      	b.n	8001772 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d024      	beq.n	8001740 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f6:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4b62      	ldr	r3, [pc, #392]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80016fc:	2101      	movs	r1, #1
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff fcb3 	bl	800106c <HAL_GetTick>
 8001706:	0003      	movs	r3, r0
 8001708:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff fcae 	bl	800106c <HAL_GetTick>
 8001710:	0002      	movs	r2, r0
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e227      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171e:	4b59      	ldr	r3, [pc, #356]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2202      	movs	r2, #2
 8001724:	4013      	ands	r3, r2
 8001726:	d0f1      	beq.n	800170c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b56      	ldr	r3, [pc, #344]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	22f8      	movs	r2, #248	; 0xf8
 800172e:	4393      	bics	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00da      	lsls	r2, r3, #3
 8001738:	4b52      	ldr	r3, [pc, #328]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 800173a:	430a      	orrs	r2, r1
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	e018      	b.n	8001772 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001740:	4b50      	ldr	r3, [pc, #320]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b4f      	ldr	r3, [pc, #316]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 8001746:	2101      	movs	r1, #1
 8001748:	438a      	bics	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fc8e 	bl	800106c <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff fc89 	bl	800106c <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e202      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001768:	4b46      	ldr	r3, [pc, #280]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2202      	movs	r2, #2
 800176e:	4013      	ands	r3, r2
 8001770:	d1f1      	bne.n	8001756 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2208      	movs	r2, #8
 8001778:	4013      	ands	r3, r2
 800177a:	d036      	beq.n	80017ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d019      	beq.n	80017b8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001784:	4b3f      	ldr	r3, [pc, #252]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 8001786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001788:	4b3e      	ldr	r3, [pc, #248]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 800178a:	2101      	movs	r1, #1
 800178c:	430a      	orrs	r2, r1
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001790:	f7ff fc6c 	bl	800106c <HAL_GetTick>
 8001794:	0003      	movs	r3, r0
 8001796:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179a:	f7ff fc67 	bl	800106c <HAL_GetTick>
 800179e:	0002      	movs	r2, r0
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e1e0      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ac:	4b35      	ldr	r3, [pc, #212]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80017ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b0:	2202      	movs	r2, #2
 80017b2:	4013      	ands	r3, r2
 80017b4:	d0f1      	beq.n	800179a <HAL_RCC_OscConfig+0x242>
 80017b6:	e018      	b.n	80017ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80017ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017bc:	4b31      	ldr	r3, [pc, #196]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80017be:	2101      	movs	r1, #1
 80017c0:	438a      	bics	r2, r1
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c4:	f7ff fc52 	bl	800106c <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ce:	f7ff fc4d 	bl	800106c <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e1c6      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	2202      	movs	r2, #2
 80017e6:	4013      	ands	r3, r2
 80017e8:	d1f1      	bne.n	80017ce <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2204      	movs	r2, #4
 80017f0:	4013      	ands	r3, r2
 80017f2:	d100      	bne.n	80017f6 <HAL_RCC_OscConfig+0x29e>
 80017f4:	e0b4      	b.n	8001960 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f6:	201f      	movs	r0, #31
 80017f8:	183b      	adds	r3, r7, r0
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fe:	4b21      	ldr	r3, [pc, #132]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 8001800:	69da      	ldr	r2, [r3, #28]
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	055b      	lsls	r3, r3, #21
 8001806:	4013      	ands	r3, r2
 8001808:	d110      	bne.n	800182c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180a:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 800180c:	69da      	ldr	r2, [r3, #28]
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 8001810:	2180      	movs	r1, #128	; 0x80
 8001812:	0549      	lsls	r1, r1, #21
 8001814:	430a      	orrs	r2, r1
 8001816:	61da      	str	r2, [r3, #28]
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 800181a:	69da      	ldr	r2, [r3, #28]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	055b      	lsls	r3, r3, #21
 8001820:	4013      	ands	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001826:	183b      	adds	r3, r7, r0
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_RCC_OscConfig+0x338>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4013      	ands	r3, r2
 8001836:	d11a      	bne.n	800186e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <HAL_RCC_OscConfig+0x338>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <HAL_RCC_OscConfig+0x338>)
 800183e:	2180      	movs	r1, #128	; 0x80
 8001840:	0049      	lsls	r1, r1, #1
 8001842:	430a      	orrs	r2, r1
 8001844:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001846:	f7ff fc11 	bl	800106c <HAL_GetTick>
 800184a:	0003      	movs	r3, r0
 800184c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001850:	f7ff fc0c 	bl	800106c <HAL_GetTick>
 8001854:	0002      	movs	r2, r0
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e185      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_RCC_OscConfig+0x338>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	4013      	ands	r3, r2
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d10e      	bne.n	8001894 <HAL_RCC_OscConfig+0x33c>
 8001876:	4b03      	ldr	r3, [pc, #12]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 8001878:	6a1a      	ldr	r2, [r3, #32]
 800187a:	4b02      	ldr	r3, [pc, #8]	; (8001884 <HAL_RCC_OscConfig+0x32c>)
 800187c:	2101      	movs	r1, #1
 800187e:	430a      	orrs	r2, r1
 8001880:	621a      	str	r2, [r3, #32]
 8001882:	e035      	b.n	80018f0 <HAL_RCC_OscConfig+0x398>
 8001884:	40021000 	.word	0x40021000
 8001888:	fffeffff 	.word	0xfffeffff
 800188c:	fffbffff 	.word	0xfffbffff
 8001890:	40007000 	.word	0x40007000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10c      	bne.n	80018b6 <HAL_RCC_OscConfig+0x35e>
 800189c:	4bb6      	ldr	r3, [pc, #728]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 800189e:	6a1a      	ldr	r2, [r3, #32]
 80018a0:	4bb5      	ldr	r3, [pc, #724]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80018a2:	2101      	movs	r1, #1
 80018a4:	438a      	bics	r2, r1
 80018a6:	621a      	str	r2, [r3, #32]
 80018a8:	4bb3      	ldr	r3, [pc, #716]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80018aa:	6a1a      	ldr	r2, [r3, #32]
 80018ac:	4bb2      	ldr	r3, [pc, #712]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80018ae:	2104      	movs	r1, #4
 80018b0:	438a      	bics	r2, r1
 80018b2:	621a      	str	r2, [r3, #32]
 80018b4:	e01c      	b.n	80018f0 <HAL_RCC_OscConfig+0x398>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x380>
 80018be:	4bae      	ldr	r3, [pc, #696]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80018c0:	6a1a      	ldr	r2, [r3, #32]
 80018c2:	4bad      	ldr	r3, [pc, #692]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80018c4:	2104      	movs	r1, #4
 80018c6:	430a      	orrs	r2, r1
 80018c8:	621a      	str	r2, [r3, #32]
 80018ca:	4bab      	ldr	r3, [pc, #684]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80018cc:	6a1a      	ldr	r2, [r3, #32]
 80018ce:	4baa      	ldr	r3, [pc, #680]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80018d0:	2101      	movs	r1, #1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	621a      	str	r2, [r3, #32]
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0x398>
 80018d8:	4ba7      	ldr	r3, [pc, #668]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80018da:	6a1a      	ldr	r2, [r3, #32]
 80018dc:	4ba6      	ldr	r3, [pc, #664]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80018de:	2101      	movs	r1, #1
 80018e0:	438a      	bics	r2, r1
 80018e2:	621a      	str	r2, [r3, #32]
 80018e4:	4ba4      	ldr	r3, [pc, #656]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80018e6:	6a1a      	ldr	r2, [r3, #32]
 80018e8:	4ba3      	ldr	r3, [pc, #652]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80018ea:	2104      	movs	r1, #4
 80018ec:	438a      	bics	r2, r1
 80018ee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d014      	beq.n	8001922 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f8:	f7ff fbb8 	bl	800106c <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001900:	e009      	b.n	8001916 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff fbb3 	bl	800106c <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	4a9b      	ldr	r2, [pc, #620]	; (8001b7c <HAL_RCC_OscConfig+0x624>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e12b      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001916:	4b98      	ldr	r3, [pc, #608]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	2202      	movs	r2, #2
 800191c:	4013      	ands	r3, r2
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x3aa>
 8001920:	e013      	b.n	800194a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001922:	f7ff fba3 	bl	800106c <HAL_GetTick>
 8001926:	0003      	movs	r3, r0
 8001928:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192a:	e009      	b.n	8001940 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff fb9e 	bl	800106c <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	4a91      	ldr	r2, [pc, #580]	; (8001b7c <HAL_RCC_OscConfig+0x624>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e116      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001940:	4b8d      	ldr	r3, [pc, #564]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	2202      	movs	r2, #2
 8001946:	4013      	ands	r3, r2
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800194a:	231f      	movs	r3, #31
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001954:	4b88      	ldr	r3, [pc, #544]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001956:	69da      	ldr	r2, [r3, #28]
 8001958:	4b87      	ldr	r3, [pc, #540]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 800195a:	4989      	ldr	r1, [pc, #548]	; (8001b80 <HAL_RCC_OscConfig+0x628>)
 800195c:	400a      	ands	r2, r1
 800195e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2210      	movs	r2, #16
 8001966:	4013      	ands	r3, r2
 8001968:	d063      	beq.n	8001a32 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d12a      	bne.n	80019c8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001972:	4b81      	ldr	r3, [pc, #516]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001976:	4b80      	ldr	r3, [pc, #512]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001978:	2104      	movs	r1, #4
 800197a:	430a      	orrs	r2, r1
 800197c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800197e:	4b7e      	ldr	r3, [pc, #504]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001982:	4b7d      	ldr	r3, [pc, #500]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001984:	2101      	movs	r1, #1
 8001986:	430a      	orrs	r2, r1
 8001988:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198a:	f7ff fb6f 	bl	800106c <HAL_GetTick>
 800198e:	0003      	movs	r3, r0
 8001990:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001994:	f7ff fb6a 	bl	800106c <HAL_GetTick>
 8001998:	0002      	movs	r2, r0
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e0e3      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019a6:	4b74      	ldr	r3, [pc, #464]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80019a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019aa:	2202      	movs	r2, #2
 80019ac:	4013      	ands	r3, r2
 80019ae:	d0f1      	beq.n	8001994 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019b0:	4b71      	ldr	r3, [pc, #452]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80019b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b4:	22f8      	movs	r2, #248	; 0xf8
 80019b6:	4393      	bics	r3, r2
 80019b8:	0019      	movs	r1, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	00da      	lsls	r2, r3, #3
 80019c0:	4b6d      	ldr	r3, [pc, #436]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80019c2:	430a      	orrs	r2, r1
 80019c4:	635a      	str	r2, [r3, #52]	; 0x34
 80019c6:	e034      	b.n	8001a32 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	3305      	adds	r3, #5
 80019ce:	d111      	bne.n	80019f4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019d0:	4b69      	ldr	r3, [pc, #420]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80019d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d4:	4b68      	ldr	r3, [pc, #416]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80019d6:	2104      	movs	r1, #4
 80019d8:	438a      	bics	r2, r1
 80019da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019dc:	4b66      	ldr	r3, [pc, #408]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80019de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e0:	22f8      	movs	r2, #248	; 0xf8
 80019e2:	4393      	bics	r3, r2
 80019e4:	0019      	movs	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	00da      	lsls	r2, r3, #3
 80019ec:	4b62      	ldr	r3, [pc, #392]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80019ee:	430a      	orrs	r2, r1
 80019f0:	635a      	str	r2, [r3, #52]	; 0x34
 80019f2:	e01e      	b.n	8001a32 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019f4:	4b60      	ldr	r3, [pc, #384]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80019f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019f8:	4b5f      	ldr	r3, [pc, #380]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 80019fa:	2104      	movs	r1, #4
 80019fc:	430a      	orrs	r2, r1
 80019fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a00:	4b5d      	ldr	r3, [pc, #372]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a04:	4b5c      	ldr	r3, [pc, #368]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001a06:	2101      	movs	r1, #1
 8001a08:	438a      	bics	r2, r1
 8001a0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fb2e 	bl	800106c <HAL_GetTick>
 8001a10:	0003      	movs	r3, r0
 8001a12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a16:	f7ff fb29 	bl	800106c <HAL_GetTick>
 8001a1a:	0002      	movs	r2, r0
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e0a2      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a28:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d1f1      	bne.n	8001a16 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d100      	bne.n	8001a3c <HAL_RCC_OscConfig+0x4e4>
 8001a3a:	e097      	b.n	8001b6c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a3c:	4b4e      	ldr	r3, [pc, #312]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	220c      	movs	r2, #12
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d100      	bne.n	8001a4a <HAL_RCC_OscConfig+0x4f2>
 8001a48:	e06b      	b.n	8001b22 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d14c      	bne.n	8001aec <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4b48      	ldr	r3, [pc, #288]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001a58:	494a      	ldr	r1, [pc, #296]	; (8001b84 <HAL_RCC_OscConfig+0x62c>)
 8001a5a:	400a      	ands	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fb05 	bl	800106c <HAL_GetTick>
 8001a62:	0003      	movs	r3, r0
 8001a64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a68:	f7ff fb00 	bl	800106c <HAL_GetTick>
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e079      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	049b      	lsls	r3, r3, #18
 8001a82:	4013      	ands	r3, r2
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a86:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	220f      	movs	r2, #15
 8001a8c:	4393      	bics	r3, r2
 8001a8e:	0019      	movs	r1, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a94:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001a96:	430a      	orrs	r2, r1
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a9a:	4b37      	ldr	r3, [pc, #220]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4a3a      	ldr	r2, [pc, #232]	; (8001b88 <HAL_RCC_OscConfig+0x630>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	431a      	orrs	r2, r3
 8001aae:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b2f      	ldr	r3, [pc, #188]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001aba:	2180      	movs	r1, #128	; 0x80
 8001abc:	0449      	lsls	r1, r1, #17
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fad3 	bl	800106c <HAL_GetTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff face 	bl	800106c <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e047      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	049b      	lsls	r3, r3, #18
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x574>
 8001aea:	e03f      	b.n	8001b6c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001af2:	4924      	ldr	r1, [pc, #144]	; (8001b84 <HAL_RCC_OscConfig+0x62c>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff fab8 	bl	800106c <HAL_GetTick>
 8001afc:	0003      	movs	r3, r0
 8001afe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b02:	f7ff fab3 	bl	800106c <HAL_GetTick>
 8001b06:	0002      	movs	r2, r0
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e02c      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	049b      	lsls	r3, r3, #18
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x5aa>
 8001b20:	e024      	b.n	8001b6c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e01f      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <HAL_RCC_OscConfig+0x620>)
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	025b      	lsls	r3, r3, #9
 8001b40:	401a      	ands	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d10e      	bne.n	8001b68 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	220f      	movs	r2, #15
 8001b4e:	401a      	ands	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d107      	bne.n	8001b68 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	23f0      	movs	r3, #240	; 0xf0
 8001b5c:	039b      	lsls	r3, r3, #14
 8001b5e:	401a      	ands	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	0018      	movs	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b008      	add	sp, #32
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	00001388 	.word	0x00001388
 8001b80:	efffffff 	.word	0xefffffff
 8001b84:	feffffff 	.word	0xfeffffff
 8001b88:	ffc2ffff 	.word	0xffc2ffff

08001b8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0b3      	b.n	8001d08 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba0:	4b5b      	ldr	r3, [pc, #364]	; (8001d10 <HAL_RCC_ClockConfig+0x184>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d911      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bae:	4b58      	ldr	r3, [pc, #352]	; (8001d10 <HAL_RCC_ClockConfig+0x184>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4393      	bics	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	4b55      	ldr	r3, [pc, #340]	; (8001d10 <HAL_RCC_ClockConfig+0x184>)
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc0:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <HAL_RCC_ClockConfig+0x184>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e09a      	b.n	8001d08 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d015      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2204      	movs	r2, #4
 8001be2:	4013      	ands	r3, r2
 8001be4:	d006      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001be6:	4b4b      	ldr	r3, [pc, #300]	; (8001d14 <HAL_RCC_ClockConfig+0x188>)
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	4b4a      	ldr	r3, [pc, #296]	; (8001d14 <HAL_RCC_ClockConfig+0x188>)
 8001bec:	21e0      	movs	r1, #224	; 0xe0
 8001bee:	00c9      	lsls	r1, r1, #3
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf4:	4b47      	ldr	r3, [pc, #284]	; (8001d14 <HAL_RCC_ClockConfig+0x188>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	22f0      	movs	r2, #240	; 0xf0
 8001bfa:	4393      	bics	r3, r2
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <HAL_RCC_ClockConfig+0x188>)
 8001c04:	430a      	orrs	r2, r1
 8001c06:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d040      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <HAL_RCC_ClockConfig+0x188>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	029b      	lsls	r3, r3, #10
 8001c22:	4013      	ands	r3, r2
 8001c24:	d114      	bne.n	8001c50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e06e      	b.n	8001d08 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_RCC_ClockConfig+0x188>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	049b      	lsls	r3, r3, #18
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d108      	bne.n	8001c50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e062      	b.n	8001d08 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c42:	4b34      	ldr	r3, [pc, #208]	; (8001d14 <HAL_RCC_ClockConfig+0x188>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2202      	movs	r2, #2
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e05b      	b.n	8001d08 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c50:	4b30      	ldr	r3, [pc, #192]	; (8001d14 <HAL_RCC_ClockConfig+0x188>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2203      	movs	r2, #3
 8001c56:	4393      	bics	r3, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <HAL_RCC_ClockConfig+0x188>)
 8001c60:	430a      	orrs	r2, r1
 8001c62:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c64:	f7ff fa02 	bl	800106c <HAL_GetTick>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6c:	e009      	b.n	8001c82 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6e:	f7ff f9fd 	bl	800106c <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	4a27      	ldr	r2, [pc, #156]	; (8001d18 <HAL_RCC_ClockConfig+0x18c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e042      	b.n	8001d08 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b24      	ldr	r3, [pc, #144]	; (8001d14 <HAL_RCC_ClockConfig+0x188>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	220c      	movs	r2, #12
 8001c88:	401a      	ands	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1ec      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <HAL_RCC_ClockConfig+0x184>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d211      	bcs.n	8001cc6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <HAL_RCC_ClockConfig+0x184>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4393      	bics	r3, r2
 8001caa:	0019      	movs	r1, r3
 8001cac:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_RCC_ClockConfig+0x184>)
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <HAL_RCC_ClockConfig+0x184>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4013      	ands	r3, r2
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e020      	b.n	8001d08 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d009      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_RCC_ClockConfig+0x188>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4a11      	ldr	r2, [pc, #68]	; (8001d1c <HAL_RCC_ClockConfig+0x190>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <HAL_RCC_ClockConfig+0x188>)
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ce4:	f000 f820 	bl	8001d28 <HAL_RCC_GetSysClockFreq>
 8001ce8:	0001      	movs	r1, r0
 8001cea:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <HAL_RCC_ClockConfig+0x188>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	091b      	lsrs	r3, r3, #4
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <HAL_RCC_ClockConfig+0x194>)
 8001cf6:	5cd3      	ldrb	r3, [r2, r3]
 8001cf8:	000a      	movs	r2, r1
 8001cfa:	40da      	lsrs	r2, r3
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_RCC_ClockConfig+0x198>)
 8001cfe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d00:	2003      	movs	r0, #3
 8001d02:	f7ff f96d 	bl	8000fe0 <HAL_InitTick>
  
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b004      	add	sp, #16
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40022000 	.word	0x40022000
 8001d14:	40021000 	.word	0x40021000
 8001d18:	00001388 	.word	0x00001388
 8001d1c:	fffff8ff 	.word	0xfffff8ff
 8001d20:	08002ee0 	.word	0x08002ee0
 8001d24:	20000004 	.word	0x20000004

08001d28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	2300      	movs	r3, #0
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d002      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0x30>
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d003      	beq.n	8001d5e <HAL_RCC_GetSysClockFreq+0x36>
 8001d56:	e02c      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d5a:	613b      	str	r3, [r7, #16]
      break;
 8001d5c:	e02c      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	0c9b      	lsrs	r3, r3, #18
 8001d62:	220f      	movs	r2, #15
 8001d64:	4013      	ands	r3, r2
 8001d66:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d68:	5cd3      	ldrb	r3, [r2, r3]
 8001d6a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	220f      	movs	r2, #15
 8001d72:	4013      	ands	r3, r2
 8001d74:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001d76:	5cd3      	ldrb	r3, [r2, r3]
 8001d78:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	025b      	lsls	r3, r3, #9
 8001d80:	4013      	ands	r3, r2
 8001d82:	d009      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	4810      	ldr	r0, [pc, #64]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d88:	f7fe f9be 	bl	8000108 <__udivsi3>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	001a      	movs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4353      	muls	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	e009      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	000a      	movs	r2, r1
 8001d9c:	0152      	lsls	r2, r2, #5
 8001d9e:	1a52      	subs	r2, r2, r1
 8001da0:	0193      	lsls	r3, r2, #6
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	185b      	adds	r3, r3, r1
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
      break;
 8001db0:	e002      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001db4:	613b      	str	r3, [r7, #16]
      break;
 8001db6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001db8:	693b      	ldr	r3, [r7, #16]
}
 8001dba:	0018      	movs	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b006      	add	sp, #24
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	007a1200 	.word	0x007a1200
 8001dcc:	08002ef0 	.word	0x08002ef0
 8001dd0:	08002f00 	.word	0x08002f00

08001dd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0a8      	b.n	8001f38 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	2382      	movs	r3, #130	; 0x82
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d009      	beq.n	8001e0e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	61da      	str	r2, [r3, #28]
 8001e00:	e005      	b.n	8001e0e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	225d      	movs	r2, #93	; 0x5d
 8001e18:	5c9b      	ldrb	r3, [r3, r2]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d107      	bne.n	8001e30 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	225c      	movs	r2, #92	; 0x5c
 8001e24:	2100      	movs	r1, #0
 8001e26:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f7fe ffe8 	bl	8000e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	225d      	movs	r2, #93	; 0x5d
 8001e34:	2102      	movs	r1, #2
 8001e36:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2140      	movs	r1, #64	; 0x40
 8001e44:	438a      	bics	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	23e0      	movs	r3, #224	; 0xe0
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d902      	bls.n	8001e5a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	e002      	b.n	8001e60 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e5a:	2380      	movs	r3, #128	; 0x80
 8001e5c:	015b      	lsls	r3, r3, #5
 8001e5e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68da      	ldr	r2, [r3, #12]
 8001e64:	23f0      	movs	r3, #240	; 0xf0
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d008      	beq.n	8001e7e <HAL_SPI_Init+0xaa>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	23e0      	movs	r3, #224	; 0xe0
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d002      	beq.n	8001e7e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	2382      	movs	r3, #130	; 0x82
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	401a      	ands	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6899      	ldr	r1, [r3, #8]
 8001e8c:	2384      	movs	r3, #132	; 0x84
 8001e8e:	021b      	lsls	r3, r3, #8
 8001e90:	400b      	ands	r3, r1
 8001e92:	431a      	orrs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	2102      	movs	r1, #2
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	400b      	ands	r3, r1
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6999      	ldr	r1, [r3, #24]
 8001eac:	2380      	movs	r3, #128	; 0x80
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	400b      	ands	r3, r1
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	2138      	movs	r1, #56	; 0x38
 8001eba:	400b      	ands	r3, r1
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	2180      	movs	r1, #128	; 0x80
 8001ec4:	400b      	ands	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	0011      	movs	r1, r2
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	019b      	lsls	r3, r3, #6
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	0c1b      	lsrs	r3, r3, #16
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eea:	2110      	movs	r1, #16
 8001eec:	400b      	ands	r3, r1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef4:	2108      	movs	r1, #8
 8001ef6:	400b      	ands	r3, r1
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68d9      	ldr	r1, [r3, #12]
 8001efe:	23f0      	movs	r3, #240	; 0xf0
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	400b      	ands	r3, r1
 8001f04:	431a      	orrs	r2, r3
 8001f06:	0011      	movs	r1, r2
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	2380      	movs	r3, #128	; 0x80
 8001f0c:	015b      	lsls	r3, r3, #5
 8001f0e:	401a      	ands	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	69da      	ldr	r2, [r3, #28]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4907      	ldr	r1, [pc, #28]	; (8001f40 <HAL_SPI_Init+0x16c>)
 8001f24:	400a      	ands	r2, r1
 8001f26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	225d      	movs	r2, #93	; 0x5d
 8001f32:	2101      	movs	r1, #1
 8001f34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	0018      	movs	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b004      	add	sp, #16
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	fffff7ff 	.word	0xfffff7ff

08001f44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	001a      	movs	r2, r3
 8001f52:	1cbb      	adds	r3, r7, #2
 8001f54:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f56:	2301      	movs	r3, #1
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f5a:	2323      	movs	r3, #35	; 0x23
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	225c      	movs	r2, #92	; 0x5c
 8001f66:	5c9b      	ldrb	r3, [r3, r2]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_SPI_TransmitReceive+0x2c>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e1c4      	b.n	80022fa <HAL_SPI_TransmitReceive+0x3b6>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	225c      	movs	r2, #92	; 0x5c
 8001f74:	2101      	movs	r1, #1
 8001f76:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f78:	f7ff f878 	bl	800106c <HAL_GetTick>
 8001f7c:	0003      	movs	r3, r0
 8001f7e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f80:	201b      	movs	r0, #27
 8001f82:	183b      	adds	r3, r7, r0
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	215d      	movs	r1, #93	; 0x5d
 8001f88:	5c52      	ldrb	r2, [r2, r1]
 8001f8a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001f92:	2312      	movs	r3, #18
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	1cba      	adds	r2, r7, #2
 8001f98:	8812      	ldrh	r2, [r2, #0]
 8001f9a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f9c:	183b      	adds	r3, r7, r0
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d011      	beq.n	8001fc8 <HAL_SPI_TransmitReceive+0x84>
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	2382      	movs	r3, #130	; 0x82
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d107      	bne.n	8001fbe <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <HAL_SPI_TransmitReceive+0x7a>
 8001fb6:	183b      	adds	r3, r7, r0
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d004      	beq.n	8001fc8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001fbe:	2323      	movs	r3, #35	; 0x23
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fc6:	e191      	b.n	80022ec <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <HAL_SPI_TransmitReceive+0x98>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_SPI_TransmitReceive+0x98>
 8001fd4:	1cbb      	adds	r3, r7, #2
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d104      	bne.n	8001fe6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001fdc:	2323      	movs	r3, #35	; 0x23
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fe4:	e182      	b.n	80022ec <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	225d      	movs	r2, #93	; 0x5d
 8001fea:	5c9b      	ldrb	r3, [r3, r2]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d003      	beq.n	8001ffa <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	225d      	movs	r2, #93	; 0x5d
 8001ff6:	2105      	movs	r1, #5
 8001ff8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1cba      	adds	r2, r7, #2
 800200a:	2146      	movs	r1, #70	; 0x46
 800200c:	8812      	ldrh	r2, [r2, #0]
 800200e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1cba      	adds	r2, r7, #2
 8002014:	2144      	movs	r1, #68	; 0x44
 8002016:	8812      	ldrh	r2, [r2, #0]
 8002018:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1cba      	adds	r2, r7, #2
 8002024:	8812      	ldrh	r2, [r2, #0]
 8002026:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1cba      	adds	r2, r7, #2
 800202c:	8812      	ldrh	r2, [r2, #0]
 800202e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	23e0      	movs	r3, #224	; 0xe0
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	429a      	cmp	r2, r3
 8002046:	d908      	bls.n	800205a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	49ac      	ldr	r1, [pc, #688]	; (8002304 <HAL_SPI_TransmitReceive+0x3c0>)
 8002054:	400a      	ands	r2, r1
 8002056:	605a      	str	r2, [r3, #4]
 8002058:	e008      	b.n	800206c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2180      	movs	r1, #128	; 0x80
 8002066:	0149      	lsls	r1, r1, #5
 8002068:	430a      	orrs	r2, r1
 800206a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2240      	movs	r2, #64	; 0x40
 8002074:	4013      	ands	r3, r2
 8002076:	2b40      	cmp	r3, #64	; 0x40
 8002078:	d007      	beq.n	800208a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2140      	movs	r1, #64	; 0x40
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	23e0      	movs	r3, #224	; 0xe0
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	429a      	cmp	r2, r3
 8002094:	d800      	bhi.n	8002098 <HAL_SPI_TransmitReceive+0x154>
 8002096:	e083      	b.n	80021a0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_SPI_TransmitReceive+0x168>
 80020a0:	2312      	movs	r3, #18
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d000      	beq.n	80020ac <HAL_SPI_TransmitReceive+0x168>
 80020aa:	e06d      	b.n	8002188 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	881a      	ldrh	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020bc:	1c9a      	adds	r2, r3, #2
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020d0:	e05a      	b.n	8002188 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2202      	movs	r2, #2
 80020da:	4013      	ands	r3, r2
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d11b      	bne.n	8002118 <HAL_SPI_TransmitReceive+0x1d4>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d016      	beq.n	8002118 <HAL_SPI_TransmitReceive+0x1d4>
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d113      	bne.n	8002118 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f4:	881a      	ldrh	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002100:	1c9a      	adds	r2, r3, #2
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002114:	2300      	movs	r3, #0
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2201      	movs	r2, #1
 8002120:	4013      	ands	r3, r2
 8002122:	2b01      	cmp	r3, #1
 8002124:	d11c      	bne.n	8002160 <HAL_SPI_TransmitReceive+0x21c>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2246      	movs	r2, #70	; 0x46
 800212a:	5a9b      	ldrh	r3, [r3, r2]
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d016      	beq.n	8002160 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	b292      	uxth	r2, r2
 800213e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	1c9a      	adds	r2, r3, #2
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2246      	movs	r2, #70	; 0x46
 800214e:	5a9b      	ldrh	r3, [r3, r2]
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b299      	uxth	r1, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2246      	movs	r2, #70	; 0x46
 800215a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800215c:	2301      	movs	r3, #1
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002160:	f7fe ff84 	bl	800106c <HAL_GetTick>
 8002164:	0002      	movs	r2, r0
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800216c:	429a      	cmp	r2, r3
 800216e:	d80b      	bhi.n	8002188 <HAL_SPI_TransmitReceive+0x244>
 8002170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002172:	3301      	adds	r3, #1
 8002174:	d008      	beq.n	8002188 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002176:	2323      	movs	r3, #35	; 0x23
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	2203      	movs	r2, #3
 800217c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	225d      	movs	r2, #93	; 0x5d
 8002182:	2101      	movs	r1, #1
 8002184:	5499      	strb	r1, [r3, r2]
        goto error;
 8002186:	e0b1      	b.n	80022ec <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d19f      	bne.n	80020d2 <HAL_SPI_TransmitReceive+0x18e>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2246      	movs	r2, #70	; 0x46
 8002196:	5a9b      	ldrh	r3, [r3, r2]
 8002198:	b29b      	uxth	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d199      	bne.n	80020d2 <HAL_SPI_TransmitReceive+0x18e>
 800219e:	e089      	b.n	80022b4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_SPI_TransmitReceive+0x270>
 80021a8:	2312      	movs	r3, #18
 80021aa:	18fb      	adds	r3, r7, r3
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d000      	beq.n	80021b4 <HAL_SPI_TransmitReceive+0x270>
 80021b2:	e074      	b.n	800229e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	330c      	adds	r3, #12
 80021be:	7812      	ldrb	r2, [r2, #0]
 80021c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021da:	e060      	b.n	800229e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2202      	movs	r2, #2
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d11c      	bne.n	8002224 <HAL_SPI_TransmitReceive+0x2e0>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d017      	beq.n	8002224 <HAL_SPI_TransmitReceive+0x2e0>
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d114      	bne.n	8002224 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	330c      	adds	r3, #12
 8002204:	7812      	ldrb	r2, [r2, #0]
 8002206:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002216:	b29b      	uxth	r3, r3
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2201      	movs	r2, #1
 800222c:	4013      	ands	r3, r2
 800222e:	2b01      	cmp	r3, #1
 8002230:	d11e      	bne.n	8002270 <HAL_SPI_TransmitReceive+0x32c>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2246      	movs	r2, #70	; 0x46
 8002236:	5a9b      	ldrh	r3, [r3, r2]
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d018      	beq.n	8002270 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	330c      	adds	r3, #12
 8002244:	001a      	movs	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	7812      	ldrb	r2, [r2, #0]
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2246      	movs	r2, #70	; 0x46
 800225e:	5a9b      	ldrh	r3, [r3, r2]
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b299      	uxth	r1, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2246      	movs	r2, #70	; 0x46
 800226a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800226c:	2301      	movs	r3, #1
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002270:	f7fe fefc 	bl	800106c <HAL_GetTick>
 8002274:	0002      	movs	r2, r0
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800227c:	429a      	cmp	r2, r3
 800227e:	d802      	bhi.n	8002286 <HAL_SPI_TransmitReceive+0x342>
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	3301      	adds	r3, #1
 8002284:	d102      	bne.n	800228c <HAL_SPI_TransmitReceive+0x348>
 8002286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002288:	2b00      	cmp	r3, #0
 800228a:	d108      	bne.n	800229e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800228c:	2323      	movs	r3, #35	; 0x23
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	2203      	movs	r2, #3
 8002292:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	225d      	movs	r2, #93	; 0x5d
 8002298:	2101      	movs	r1, #1
 800229a:	5499      	strb	r1, [r3, r2]
        goto error;
 800229c:	e026      	b.n	80022ec <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d199      	bne.n	80021dc <HAL_SPI_TransmitReceive+0x298>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2246      	movs	r2, #70	; 0x46
 80022ac:	5a9b      	ldrh	r3, [r3, r2]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d193      	bne.n	80021dc <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	0018      	movs	r0, r3
 80022bc:	f000 f954 	bl	8002568 <SPI_EndRxTxTransaction>
 80022c0:	1e03      	subs	r3, r0, #0
 80022c2:	d006      	beq.n	80022d2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80022c4:	2323      	movs	r3, #35	; 0x23
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d004      	beq.n	80022e4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80022da:	2323      	movs	r3, #35	; 0x23
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	2201      	movs	r2, #1
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	e003      	b.n	80022ec <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	225d      	movs	r2, #93	; 0x5d
 80022e8:	2101      	movs	r1, #1
 80022ea:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	225c      	movs	r2, #92	; 0x5c
 80022f0:	2100      	movs	r1, #0
 80022f2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80022f4:	2323      	movs	r3, #35	; 0x23
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	781b      	ldrb	r3, [r3, #0]
}
 80022fa:	0018      	movs	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b00a      	add	sp, #40	; 0x28
 8002300:	bd80      	pop	{r7, pc}
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	ffffefff 	.word	0xffffefff

08002308 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	1dfb      	adds	r3, r7, #7
 8002316:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002318:	f7fe fea8 	bl	800106c <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	18d3      	adds	r3, r2, r3
 8002326:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002328:	f7fe fea0 	bl	800106c <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002330:	4b3a      	ldr	r3, [pc, #232]	; (800241c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	015b      	lsls	r3, r3, #5
 8002336:	0d1b      	lsrs	r3, r3, #20
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	4353      	muls	r3, r2
 800233c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800233e:	e058      	b.n	80023f2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	3301      	adds	r3, #1
 8002344:	d055      	beq.n	80023f2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002346:	f7fe fe91 	bl	800106c <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	429a      	cmp	r2, r3
 8002354:	d902      	bls.n	800235c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d142      	bne.n	80023e2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	21e0      	movs	r1, #224	; 0xe0
 8002368:	438a      	bics	r2, r1
 800236a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	2382      	movs	r3, #130	; 0x82
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	429a      	cmp	r2, r3
 8002376:	d113      	bne.n	80023a0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	429a      	cmp	r2, r3
 8002382:	d005      	beq.n	8002390 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	429a      	cmp	r2, r3
 800238e:	d107      	bne.n	80023a0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2140      	movs	r1, #64	; 0x40
 800239c:	438a      	bics	r2, r1
 800239e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	019b      	lsls	r3, r3, #6
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d110      	bne.n	80023ce <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	491a      	ldr	r1, [pc, #104]	; (8002420 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80023b8:	400a      	ands	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2180      	movs	r1, #128	; 0x80
 80023c8:	0189      	lsls	r1, r1, #6
 80023ca:	430a      	orrs	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	225d      	movs	r2, #93	; 0x5d
 80023d2:	2101      	movs	r1, #1
 80023d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	225c      	movs	r2, #92	; 0x5c
 80023da:	2100      	movs	r1, #0
 80023dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e017      	b.n	8002412 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	4013      	ands	r3, r2
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	425a      	negs	r2, r3
 8002402:	4153      	adcs	r3, r2
 8002404:	b2db      	uxtb	r3, r3
 8002406:	001a      	movs	r2, r3
 8002408:	1dfb      	adds	r3, r7, #7
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d197      	bne.n	8002340 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b008      	add	sp, #32
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	20000004 	.word	0x20000004
 8002420:	ffffdfff 	.word	0xffffdfff

08002424 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002432:	2317      	movs	r3, #23
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	2200      	movs	r2, #0
 8002438:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800243a:	f7fe fe17 	bl	800106c <HAL_GetTick>
 800243e:	0002      	movs	r2, r0
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	18d3      	adds	r3, r2, r3
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800244a:	f7fe fe0f 	bl	800106c <HAL_GetTick>
 800244e:	0003      	movs	r3, r0
 8002450:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	330c      	adds	r3, #12
 8002458:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800245a:	4b41      	ldr	r3, [pc, #260]	; (8002560 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	0013      	movs	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	189b      	adds	r3, r3, r2
 8002464:	00da      	lsls	r2, r3, #3
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	0d1b      	lsrs	r3, r3, #20
 800246a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246c:	4353      	muls	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002470:	e068      	b.n	8002544 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	23c0      	movs	r3, #192	; 0xc0
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	429a      	cmp	r2, r3
 800247a:	d10a      	bne.n	8002492 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d107      	bne.n	8002492 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	2117      	movs	r1, #23
 800248a:	187b      	adds	r3, r7, r1
 800248c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800248e:	187b      	adds	r3, r7, r1
 8002490:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	3301      	adds	r3, #1
 8002496:	d055      	beq.n	8002544 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002498:	f7fe fde8 	bl	800106c <HAL_GetTick>
 800249c:	0002      	movs	r2, r0
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d902      	bls.n	80024ae <SPI_WaitFifoStateUntilTimeout+0x8a>
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d142      	bne.n	8002534 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	21e0      	movs	r1, #224	; 0xe0
 80024ba:	438a      	bics	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	2382      	movs	r3, #130	; 0x82
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d113      	bne.n	80024f2 <SPI_WaitFifoStateUntilTimeout+0xce>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	2380      	movs	r3, #128	; 0x80
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d005      	beq.n	80024e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	429a      	cmp	r2, r3
 80024e0:	d107      	bne.n	80024f2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2140      	movs	r1, #64	; 0x40
 80024ee:	438a      	bics	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	019b      	lsls	r3, r3, #6
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d110      	bne.n	8002520 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4916      	ldr	r1, [pc, #88]	; (8002564 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800250a:	400a      	ands	r2, r1
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0189      	lsls	r1, r1, #6
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	225d      	movs	r2, #93	; 0x5d
 8002524:	2101      	movs	r1, #1
 8002526:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	225c      	movs	r2, #92	; 0x5c
 800252c:	2100      	movs	r1, #0
 800252e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e010      	b.n	8002556 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	3b01      	subs	r3, #1
 8002542:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	4013      	ands	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	429a      	cmp	r2, r3
 8002552:	d18e      	bne.n	8002472 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	b00a      	add	sp, #40	; 0x28
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	20000004 	.word	0x20000004
 8002564:	ffffdfff 	.word	0xffffdfff

08002568 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af02      	add	r7, sp, #8
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002574:	68ba      	ldr	r2, [r7, #8]
 8002576:	23c0      	movs	r3, #192	; 0xc0
 8002578:	0159      	lsls	r1, r3, #5
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	0013      	movs	r3, r2
 8002582:	2200      	movs	r2, #0
 8002584:	f7ff ff4e 	bl	8002424 <SPI_WaitFifoStateUntilTimeout>
 8002588:	1e03      	subs	r3, r0, #0
 800258a:	d007      	beq.n	800259c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002590:	2220      	movs	r2, #32
 8002592:	431a      	orrs	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e027      	b.n	80025ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	0013      	movs	r3, r2
 80025a6:	2200      	movs	r2, #0
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	f7ff fead 	bl	8002308 <SPI_WaitFlagStateUntilTimeout>
 80025ae:	1e03      	subs	r3, r0, #0
 80025b0:	d007      	beq.n	80025c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b6:	2220      	movs	r2, #32
 80025b8:	431a      	orrs	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e014      	b.n	80025ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	23c0      	movs	r3, #192	; 0xc0
 80025c6:	00d9      	lsls	r1, r3, #3
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	0013      	movs	r3, r2
 80025d0:	2200      	movs	r2, #0
 80025d2:	f7ff ff27 	bl	8002424 <SPI_WaitFifoStateUntilTimeout>
 80025d6:	1e03      	subs	r3, r0, #0
 80025d8:	d007      	beq.n	80025ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025de:	2220      	movs	r2, #32
 80025e0:	431a      	orrs	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e000      	b.n	80025ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b004      	add	sp, #16
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e042      	b.n	800268c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	223d      	movs	r2, #61	; 0x3d
 800260a:	5c9b      	ldrb	r3, [r3, r2]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d107      	bne.n	8002622 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	223c      	movs	r2, #60	; 0x3c
 8002616:	2100      	movs	r1, #0
 8002618:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	0018      	movs	r0, r3
 800261e:	f7fe fc3b 	bl	8000e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	223d      	movs	r2, #61	; 0x3d
 8002626:	2102      	movs	r1, #2
 8002628:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3304      	adds	r3, #4
 8002632:	0019      	movs	r1, r3
 8002634:	0010      	movs	r0, r2
 8002636:	f000 fa83 	bl	8002b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2246      	movs	r2, #70	; 0x46
 800263e:	2101      	movs	r1, #1
 8002640:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	223e      	movs	r2, #62	; 0x3e
 8002646:	2101      	movs	r1, #1
 8002648:	5499      	strb	r1, [r3, r2]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	223f      	movs	r2, #63	; 0x3f
 800264e:	2101      	movs	r1, #1
 8002650:	5499      	strb	r1, [r3, r2]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2240      	movs	r2, #64	; 0x40
 8002656:	2101      	movs	r1, #1
 8002658:	5499      	strb	r1, [r3, r2]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2241      	movs	r2, #65	; 0x41
 800265e:	2101      	movs	r1, #1
 8002660:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2242      	movs	r2, #66	; 0x42
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2243      	movs	r2, #67	; 0x43
 800266e:	2101      	movs	r1, #1
 8002670:	5499      	strb	r1, [r3, r2]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2244      	movs	r2, #68	; 0x44
 8002676:	2101      	movs	r1, #1
 8002678:	5499      	strb	r1, [r3, r2]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2245      	movs	r2, #69	; 0x45
 800267e:	2101      	movs	r1, #1
 8002680:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	223d      	movs	r2, #61	; 0x3d
 8002686:	2101      	movs	r1, #1
 8002688:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b002      	add	sp, #8
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	223d      	movs	r2, #61	; 0x3d
 80026a0:	5c9b      	ldrb	r3, [r3, r2]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d001      	beq.n	80026ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e035      	b.n	8002718 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	223d      	movs	r2, #61	; 0x3d
 80026b0:	2102      	movs	r1, #2
 80026b2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2101      	movs	r1, #1
 80026c0:	430a      	orrs	r2, r1
 80026c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a15      	ldr	r2, [pc, #84]	; (8002720 <HAL_TIM_Base_Start_IT+0x8c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d009      	beq.n	80026e2 <HAL_TIM_Base_Start_IT+0x4e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a14      	ldr	r2, [pc, #80]	; (8002724 <HAL_TIM_Base_Start_IT+0x90>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d004      	beq.n	80026e2 <HAL_TIM_Base_Start_IT+0x4e>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a12      	ldr	r2, [pc, #72]	; (8002728 <HAL_TIM_Base_Start_IT+0x94>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d111      	bne.n	8002706 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2207      	movs	r2, #7
 80026ea:	4013      	ands	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b06      	cmp	r3, #6
 80026f2:	d010      	beq.n	8002716 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2101      	movs	r1, #1
 8002700:	430a      	orrs	r2, r1
 8002702:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002704:	e007      	b.n	8002716 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2101      	movs	r1, #1
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b004      	add	sp, #16
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40012c00 	.word	0x40012c00
 8002724:	40000400 	.word	0x40000400
 8002728:	40014000 	.word	0x40014000

0800272c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2202      	movs	r2, #2
 800273c:	4013      	ands	r3, r2
 800273e:	2b02      	cmp	r3, #2
 8002740:	d124      	bne.n	800278c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2202      	movs	r2, #2
 800274a:	4013      	ands	r3, r2
 800274c:	2b02      	cmp	r3, #2
 800274e:	d11d      	bne.n	800278c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2203      	movs	r2, #3
 8002756:	4252      	negs	r2, r2
 8002758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	2203      	movs	r2, #3
 8002768:	4013      	ands	r3, r2
 800276a:	d004      	beq.n	8002776 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0018      	movs	r0, r3
 8002770:	f000 f9ce 	bl	8002b10 <HAL_TIM_IC_CaptureCallback>
 8002774:	e007      	b.n	8002786 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f000 f9c1 	bl	8002b00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	0018      	movs	r0, r3
 8002782:	f000 f9cd 	bl	8002b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2204      	movs	r2, #4
 8002794:	4013      	ands	r3, r2
 8002796:	2b04      	cmp	r3, #4
 8002798:	d125      	bne.n	80027e6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	2204      	movs	r2, #4
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d11e      	bne.n	80027e6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2205      	movs	r2, #5
 80027ae:	4252      	negs	r2, r2
 80027b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2202      	movs	r2, #2
 80027b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	23c0      	movs	r3, #192	; 0xc0
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4013      	ands	r3, r2
 80027c4:	d004      	beq.n	80027d0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 f9a1 	bl	8002b10 <HAL_TIM_IC_CaptureCallback>
 80027ce:	e007      	b.n	80027e0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 f994 	bl	8002b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 f9a0 	bl	8002b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2208      	movs	r2, #8
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d124      	bne.n	800283e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	2208      	movs	r2, #8
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d11d      	bne.n	800283e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2209      	movs	r2, #9
 8002808:	4252      	negs	r2, r2
 800280a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2204      	movs	r2, #4
 8002810:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	2203      	movs	r2, #3
 800281a:	4013      	ands	r3, r2
 800281c:	d004      	beq.n	8002828 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	0018      	movs	r0, r3
 8002822:	f000 f975 	bl	8002b10 <HAL_TIM_IC_CaptureCallback>
 8002826:	e007      	b.n	8002838 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	0018      	movs	r0, r3
 800282c:	f000 f968 	bl	8002b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	0018      	movs	r0, r3
 8002834:	f000 f974 	bl	8002b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2210      	movs	r2, #16
 8002846:	4013      	ands	r3, r2
 8002848:	2b10      	cmp	r3, #16
 800284a:	d125      	bne.n	8002898 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2210      	movs	r2, #16
 8002854:	4013      	ands	r3, r2
 8002856:	2b10      	cmp	r3, #16
 8002858:	d11e      	bne.n	8002898 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2211      	movs	r2, #17
 8002860:	4252      	negs	r2, r2
 8002862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2208      	movs	r2, #8
 8002868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	69da      	ldr	r2, [r3, #28]
 8002870:	23c0      	movs	r3, #192	; 0xc0
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4013      	ands	r3, r2
 8002876:	d004      	beq.n	8002882 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f948 	bl	8002b10 <HAL_TIM_IC_CaptureCallback>
 8002880:	e007      	b.n	8002892 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0018      	movs	r0, r3
 8002886:	f000 f93b 	bl	8002b00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	0018      	movs	r0, r3
 800288e:	f000 f947 	bl	8002b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2201      	movs	r2, #1
 80028a0:	4013      	ands	r3, r2
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d10f      	bne.n	80028c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d108      	bne.n	80028c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2202      	movs	r2, #2
 80028ba:	4252      	negs	r2, r2
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f7fe fa19 	bl	8000cf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b80      	cmp	r3, #128	; 0x80
 80028d2:	d10f      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	2280      	movs	r2, #128	; 0x80
 80028dc:	4013      	ands	r3, r2
 80028de:	2b80      	cmp	r3, #128	; 0x80
 80028e0:	d108      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2281      	movs	r2, #129	; 0x81
 80028e8:	4252      	negs	r2, r2
 80028ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	0018      	movs	r0, r3
 80028f0:	f000 fa96 	bl	8002e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	4013      	ands	r3, r2
 80028fe:	2b40      	cmp	r3, #64	; 0x40
 8002900:	d10f      	bne.n	8002922 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2240      	movs	r2, #64	; 0x40
 800290a:	4013      	ands	r3, r2
 800290c:	2b40      	cmp	r3, #64	; 0x40
 800290e:	d108      	bne.n	8002922 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2241      	movs	r2, #65	; 0x41
 8002916:	4252      	negs	r2, r2
 8002918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	0018      	movs	r0, r3
 800291e:	f000 f907 	bl	8002b30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2220      	movs	r2, #32
 800292a:	4013      	ands	r3, r2
 800292c:	2b20      	cmp	r3, #32
 800292e:	d10f      	bne.n	8002950 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	4013      	ands	r3, r2
 800293a:	2b20      	cmp	r3, #32
 800293c:	d108      	bne.n	8002950 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2221      	movs	r2, #33	; 0x21
 8002944:	4252      	negs	r2, r2
 8002946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	0018      	movs	r0, r3
 800294c:	f000 fa60 	bl	8002e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	b002      	add	sp, #8
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002962:	230f      	movs	r3, #15
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	223c      	movs	r2, #60	; 0x3c
 800296e:	5c9b      	ldrb	r3, [r3, r2]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_TIM_ConfigClockSource+0x20>
 8002974:	2302      	movs	r3, #2
 8002976:	e0bc      	b.n	8002af2 <HAL_TIM_ConfigClockSource+0x19a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	223c      	movs	r2, #60	; 0x3c
 800297c:	2101      	movs	r1, #1
 800297e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	223d      	movs	r2, #61	; 0x3d
 8002984:	2102      	movs	r1, #2
 8002986:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2277      	movs	r2, #119	; 0x77
 8002994:	4393      	bics	r3, r2
 8002996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4a58      	ldr	r2, [pc, #352]	; (8002afc <HAL_TIM_ConfigClockSource+0x1a4>)
 800299c:	4013      	ands	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2280      	movs	r2, #128	; 0x80
 80029ae:	0192      	lsls	r2, r2, #6
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d040      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0xde>
 80029b4:	2280      	movs	r2, #128	; 0x80
 80029b6:	0192      	lsls	r2, r2, #6
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d900      	bls.n	80029be <HAL_TIM_ConfigClockSource+0x66>
 80029bc:	e088      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x178>
 80029be:	2280      	movs	r2, #128	; 0x80
 80029c0:	0152      	lsls	r2, r2, #5
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d100      	bne.n	80029c8 <HAL_TIM_ConfigClockSource+0x70>
 80029c6:	e088      	b.n	8002ada <HAL_TIM_ConfigClockSource+0x182>
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	0152      	lsls	r2, r2, #5
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d900      	bls.n	80029d2 <HAL_TIM_ConfigClockSource+0x7a>
 80029d0:	e07e      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x178>
 80029d2:	2b70      	cmp	r3, #112	; 0x70
 80029d4:	d018      	beq.n	8002a08 <HAL_TIM_ConfigClockSource+0xb0>
 80029d6:	d900      	bls.n	80029da <HAL_TIM_ConfigClockSource+0x82>
 80029d8:	e07a      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x178>
 80029da:	2b60      	cmp	r3, #96	; 0x60
 80029dc:	d04f      	beq.n	8002a7e <HAL_TIM_ConfigClockSource+0x126>
 80029de:	d900      	bls.n	80029e2 <HAL_TIM_ConfigClockSource+0x8a>
 80029e0:	e076      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x178>
 80029e2:	2b50      	cmp	r3, #80	; 0x50
 80029e4:	d03b      	beq.n	8002a5e <HAL_TIM_ConfigClockSource+0x106>
 80029e6:	d900      	bls.n	80029ea <HAL_TIM_ConfigClockSource+0x92>
 80029e8:	e072      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x178>
 80029ea:	2b40      	cmp	r3, #64	; 0x40
 80029ec:	d057      	beq.n	8002a9e <HAL_TIM_ConfigClockSource+0x146>
 80029ee:	d900      	bls.n	80029f2 <HAL_TIM_ConfigClockSource+0x9a>
 80029f0:	e06e      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x178>
 80029f2:	2b30      	cmp	r3, #48	; 0x30
 80029f4:	d063      	beq.n	8002abe <HAL_TIM_ConfigClockSource+0x166>
 80029f6:	d86b      	bhi.n	8002ad0 <HAL_TIM_ConfigClockSource+0x178>
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d060      	beq.n	8002abe <HAL_TIM_ConfigClockSource+0x166>
 80029fc:	d868      	bhi.n	8002ad0 <HAL_TIM_ConfigClockSource+0x178>
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d05d      	beq.n	8002abe <HAL_TIM_ConfigClockSource+0x166>
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d05b      	beq.n	8002abe <HAL_TIM_ConfigClockSource+0x166>
 8002a06:	e063      	b.n	8002ad0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6899      	ldr	r1, [r3, #8]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f000 f982 	bl	8002d20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	2277      	movs	r2, #119	; 0x77
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68ba      	ldr	r2, [r7, #8]
 8002a32:	609a      	str	r2, [r3, #8]
      break;
 8002a34:	e052      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6899      	ldr	r1, [r3, #8]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f000 f96b 	bl	8002d20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	01c9      	lsls	r1, r1, #7
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]
      break;
 8002a5c:	e03e      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6859      	ldr	r1, [r3, #4]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	001a      	movs	r2, r3
 8002a6c:	f000 f8de 	bl	8002c2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2150      	movs	r1, #80	; 0x50
 8002a76:	0018      	movs	r0, r3
 8002a78:	f000 f938 	bl	8002cec <TIM_ITRx_SetConfig>
      break;
 8002a7c:	e02e      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	6859      	ldr	r1, [r3, #4]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	001a      	movs	r2, r3
 8002a8c:	f000 f8fc 	bl	8002c88 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2160      	movs	r1, #96	; 0x60
 8002a96:	0018      	movs	r0, r3
 8002a98:	f000 f928 	bl	8002cec <TIM_ITRx_SetConfig>
      break;
 8002a9c:	e01e      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6859      	ldr	r1, [r3, #4]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	001a      	movs	r2, r3
 8002aac:	f000 f8be 	bl	8002c2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2140      	movs	r1, #64	; 0x40
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 f918 	bl	8002cec <TIM_ITRx_SetConfig>
      break;
 8002abc:	e00e      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	0010      	movs	r0, r2
 8002aca:	f000 f90f 	bl	8002cec <TIM_ITRx_SetConfig>
      break;
 8002ace:	e005      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ad0:	230f      	movs	r3, #15
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
      break;
 8002ad8:	e000      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002ada:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	223d      	movs	r2, #61	; 0x3d
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	223c      	movs	r2, #60	; 0x3c
 8002ae8:	2100      	movs	r1, #0
 8002aea:	5499      	strb	r1, [r3, r2]

  return status;
 8002aec:	230f      	movs	r3, #15
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	781b      	ldrb	r3, [r3, #0]
}
 8002af2:	0018      	movs	r0, r3
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b004      	add	sp, #16
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	ffff00ff 	.word	0xffff00ff

08002b00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b002      	add	sp, #8
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b002      	add	sp, #8
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b002      	add	sp, #8
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a2f      	ldr	r2, [pc, #188]	; (8002c10 <TIM_Base_SetConfig+0xd0>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d003      	beq.n	8002b60 <TIM_Base_SetConfig+0x20>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a2e      	ldr	r2, [pc, #184]	; (8002c14 <TIM_Base_SetConfig+0xd4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d108      	bne.n	8002b72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2270      	movs	r2, #112	; 0x70
 8002b64:	4393      	bics	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a26      	ldr	r2, [pc, #152]	; (8002c10 <TIM_Base_SetConfig+0xd0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d013      	beq.n	8002ba2 <TIM_Base_SetConfig+0x62>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a25      	ldr	r2, [pc, #148]	; (8002c14 <TIM_Base_SetConfig+0xd4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d00f      	beq.n	8002ba2 <TIM_Base_SetConfig+0x62>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a24      	ldr	r2, [pc, #144]	; (8002c18 <TIM_Base_SetConfig+0xd8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00b      	beq.n	8002ba2 <TIM_Base_SetConfig+0x62>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <TIM_Base_SetConfig+0xdc>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d007      	beq.n	8002ba2 <TIM_Base_SetConfig+0x62>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <TIM_Base_SetConfig+0xe0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d003      	beq.n	8002ba2 <TIM_Base_SetConfig+0x62>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a21      	ldr	r2, [pc, #132]	; (8002c24 <TIM_Base_SetConfig+0xe4>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d108      	bne.n	8002bb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4a20      	ldr	r2, [pc, #128]	; (8002c28 <TIM_Base_SetConfig+0xe8>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2280      	movs	r2, #128	; 0x80
 8002bb8:	4393      	bics	r3, r2
 8002bba:	001a      	movs	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <TIM_Base_SetConfig+0xd0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00b      	beq.n	8002bfa <TIM_Base_SetConfig+0xba>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a0d      	ldr	r2, [pc, #52]	; (8002c1c <TIM_Base_SetConfig+0xdc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <TIM_Base_SetConfig+0xba>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a0c      	ldr	r2, [pc, #48]	; (8002c20 <TIM_Base_SetConfig+0xe0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d003      	beq.n	8002bfa <TIM_Base_SetConfig+0xba>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a0b      	ldr	r2, [pc, #44]	; (8002c24 <TIM_Base_SetConfig+0xe4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d103      	bne.n	8002c02 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	615a      	str	r2, [r3, #20]
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	b004      	add	sp, #16
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40012c00 	.word	0x40012c00
 8002c14:	40000400 	.word	0x40000400
 8002c18:	40002000 	.word	0x40002000
 8002c1c:	40014000 	.word	0x40014000
 8002c20:	40014400 	.word	0x40014400
 8002c24:	40014800 	.word	0x40014800
 8002c28:	fffffcff 	.word	0xfffffcff

08002c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	2201      	movs	r2, #1
 8002c44:	4393      	bics	r3, r2
 8002c46:	001a      	movs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	22f0      	movs	r2, #240	; 0xf0
 8002c56:	4393      	bics	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	220a      	movs	r2, #10
 8002c68:	4393      	bics	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	621a      	str	r2, [r3, #32]
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b006      	add	sp, #24
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	2210      	movs	r2, #16
 8002c9a:	4393      	bics	r3, r2
 8002c9c:	001a      	movs	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	4a0d      	ldr	r2, [pc, #52]	; (8002ce8 <TIM_TI2_ConfigInputStage+0x60>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	031b      	lsls	r3, r3, #12
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	22a0      	movs	r2, #160	; 0xa0
 8002cc4:	4393      	bics	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	621a      	str	r2, [r3, #32]
}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b006      	add	sp, #24
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	ffff0fff 	.word	0xffff0fff

08002cec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2270      	movs	r2, #112	; 0x70
 8002d00:	4393      	bics	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	2207      	movs	r2, #7
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	609a      	str	r2, [r3, #8]
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
 8002d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <TIM_ETR_SetConfig+0x3c>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	021a      	lsls	r2, r3, #8
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	609a      	str	r2, [r3, #8]
}
 8002d54:	46c0      	nop			; (mov r8, r8)
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b006      	add	sp, #24
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	ffff00ff 	.word	0xffff00ff

08002d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	223c      	movs	r2, #60	; 0x3c
 8002d6e:	5c9b      	ldrb	r3, [r3, r2]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e041      	b.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	223c      	movs	r2, #60	; 0x3c
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	223d      	movs	r2, #61	; 0x3d
 8002d84:	2102      	movs	r1, #2
 8002d86:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2270      	movs	r2, #112	; 0x70
 8002d9c:	4393      	bics	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a13      	ldr	r2, [pc, #76]	; (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d009      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d10c      	bne.n	8002dea <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	4393      	bics	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	223d      	movs	r2, #61	; 0x3d
 8002dee:	2101      	movs	r1, #1
 8002df0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	223c      	movs	r2, #60	; 0x3c
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b004      	add	sp, #16
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40012c00 	.word	0x40012c00
 8002e08:	40000400 	.word	0x40000400
 8002e0c:	40014000 	.word	0x40014000

08002e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	b002      	add	sp, #8
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b002      	add	sp, #8
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <__libc_init_array>:
 8002e30:	b570      	push	{r4, r5, r6, lr}
 8002e32:	2600      	movs	r6, #0
 8002e34:	4d0c      	ldr	r5, [pc, #48]	; (8002e68 <__libc_init_array+0x38>)
 8002e36:	4c0d      	ldr	r4, [pc, #52]	; (8002e6c <__libc_init_array+0x3c>)
 8002e38:	1b64      	subs	r4, r4, r5
 8002e3a:	10a4      	asrs	r4, r4, #2
 8002e3c:	42a6      	cmp	r6, r4
 8002e3e:	d109      	bne.n	8002e54 <__libc_init_array+0x24>
 8002e40:	2600      	movs	r6, #0
 8002e42:	f000 f821 	bl	8002e88 <_init>
 8002e46:	4d0a      	ldr	r5, [pc, #40]	; (8002e70 <__libc_init_array+0x40>)
 8002e48:	4c0a      	ldr	r4, [pc, #40]	; (8002e74 <__libc_init_array+0x44>)
 8002e4a:	1b64      	subs	r4, r4, r5
 8002e4c:	10a4      	asrs	r4, r4, #2
 8002e4e:	42a6      	cmp	r6, r4
 8002e50:	d105      	bne.n	8002e5e <__libc_init_array+0x2e>
 8002e52:	bd70      	pop	{r4, r5, r6, pc}
 8002e54:	00b3      	lsls	r3, r6, #2
 8002e56:	58eb      	ldr	r3, [r5, r3]
 8002e58:	4798      	blx	r3
 8002e5a:	3601      	adds	r6, #1
 8002e5c:	e7ee      	b.n	8002e3c <__libc_init_array+0xc>
 8002e5e:	00b3      	lsls	r3, r6, #2
 8002e60:	58eb      	ldr	r3, [r5, r3]
 8002e62:	4798      	blx	r3
 8002e64:	3601      	adds	r6, #1
 8002e66:	e7f2      	b.n	8002e4e <__libc_init_array+0x1e>
 8002e68:	08002f10 	.word	0x08002f10
 8002e6c:	08002f10 	.word	0x08002f10
 8002e70:	08002f10 	.word	0x08002f10
 8002e74:	08002f14 	.word	0x08002f14

08002e78 <memset>:
 8002e78:	0003      	movs	r3, r0
 8002e7a:	1882      	adds	r2, r0, r2
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d100      	bne.n	8002e82 <memset+0xa>
 8002e80:	4770      	bx	lr
 8002e82:	7019      	strb	r1, [r3, #0]
 8002e84:	3301      	adds	r3, #1
 8002e86:	e7f9      	b.n	8002e7c <memset+0x4>

08002e88 <_init>:
 8002e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8e:	bc08      	pop	{r3}
 8002e90:	469e      	mov	lr, r3
 8002e92:	4770      	bx	lr

08002e94 <_fini>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9a:	bc08      	pop	{r3}
 8002e9c:	469e      	mov	lr, r3
 8002e9e:	4770      	bx	lr
